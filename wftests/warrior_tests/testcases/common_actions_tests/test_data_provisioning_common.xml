<data>
    <global>
	<testdata execute="yes" >
	</testdata>
        <command_params start=".*" end="${config_prompt.value}" timeout="60" execute="yes"></command_params>
        <verifications>
            <v1 found="yes" search="ok"/>
            <v2 found="no" search="error"/>
        </verifications>
    </global>
    <testdata title="start_confd" execute="yes"  >
        <command  end="${oper_prompt.value}"  send="confd_cli -P 4000 -noaaa"/>
    </testdata>
    <testdata title="enter_config_mode" execute="yes" row="1">
        <command verify="v1,v2,v3" end="${oper_prompt.value}"    send="set complete-on-space false "/>
        <command verify="v1,v2,v3" end="${oper_prompt.value}"    send="set paginate false "/>
        <command verify="v1,v2,v3" end="${oper_prompt.value}"  send="show eqpt shelf ${network1.ne1.shelf1.card1.shelf} pi"/>
        <command   send="configure"/>
        <command verify="v1,v2,v3"   send="set system autoP false"/>
        <command verify="v1,v2,v3,v6"   send="commit"/>
        <command verify="v1,v2,v3,v5"   send="show system"/>
        <command verify="v1,v2,v3,v7"   send="run show eqpt shelf ${network1.ne1.shelf1.card1.shelf} pi"/>
        <command verify="v1,v2,v3,v7"   send="run show inventory"/>
        <command verify="v1,v2,v3"   send="run show alarms summary"/>
        <command verify="v1,v2,v3"   send="run show alarms alarm-list"/>
        <v1 found="no" search="Error: application communication failure"/>
        <v2 found="no" search="Error: application error"/>
        <v3 found="no" search="Aborted: application communication failure"/>
        <v4 found="yes" search="operational-state up"/>
        <v5 found="yes" search="autoP.*false"/>
        <v6 found="yes" search="Commit complete"/>
        <v7 found="yes" search="unitName(.*)${network1.ne1.shelf1.shelfType}"/>
    </testdata>
    <testdata title="enter_config_mode" execute="yes" row="1">
        <command verify="v1,v2,v3" end="${oper_prompt.value}"    send="set complete-on-space false "/>
        <command verify="v1,v2,v3" end="${oper_prompt.value}"    send="set paginate false "/>
        <command verify="v1,v2,v3" end="${oper_prompt.value}"  send="show eqpt shelf ${network1.ne1.shelf1.card1.shelf} pi"/>
        <command   send="configure"/>
        <command verify="v1,v2,v3,v5"   send="show system"/>
        <!--  Commented on 13th Nov - Swati Changes 
	<command verify="v1,v2,v3"   send="run show equipment"/> -->
        <command verify="v1,v2,v3"   send="run show eqpt shelf ${network1.ne1.shelf1.card1.shelf} slot pi"/>
        <command verify="v1,v2,v3"   send="run show eqpt shelf ${network1.ne1.shelf1.card1.shelf} slot operational-state"/>
        <v1 found="no" search="Error: application communication failure"/>
        <v2 found="no" search="Error: application error"/>
        <v3 found="no" search="Aborted: application communication failure"/>
        <v4 found="yes" search="operational-state up"/>
        <v5 found="yes" search="autoP.*true"/>
        <v6 found="yes" search="Commit complete"/>
        <v7 found="yes" search="pi unitName(.*)${network1.ne1.shelf1.shelfType}"/>
    </testdata>
    <testdata title="enter_config_mode" execute="yes" row="3">
        <command verify="v1,v2,v3,v4" end="${oper_prompt.value}"    send="show sw-version"/>
        <command verify="v1,v2,v3,v4" end="${oper_prompt.value}"    send="set complete-on-space false "/>
        <command verify="v1,v2,v3,v4" end="${oper_prompt.value}"    send="set paginate false "/>
        <command send="configure"/>
        <v1 found="no" search="Error: application communication failure"/>
        <v2 found="no" search="Error: application error"/>
        <v3 found="no" search="Aborted: application communication failure"/>
        <v4 found="yes" search="ok"/>
    </testdata>
    <testdata title="request_db_init" execute="yes" row="1">
        <command verify="" end=".*Really want to do this.*" send="request db-init"/>
	<command verify="v1,v2,v3" end="${oper_prompt.value}" send="yes"/>
        <v3 found="yes" search="status db-init Complete"/>
    </testdata>
    <testdata title="enter_config_mode" execute="yes" row="2">
        <command verify="v1,v2,v3" end="${oper_prompt.value}"    send="set complete-on-space false "/>
        <command verify="v1,v2,v3" end="${oper_prompt.value}"    send="set paginate false "/>
        <command verify="v1,v2,v3" end="${oper_prompt.value}"  send="show eqpt shelf ${network1.ne1.shelf1.card1.shelf} pi"/>
        <command   send="configure"/>
        <command verify="v1,v2,v3,v5"   send="show system"/>
        <command verify="v1,v2,v3"   send="run show eqpt shelf ${network1.ne1.shelf1.card1.shelf} slot pi"/>
        <command verify="v1,v2,v3"   send="run show eqpt shelf ${network1.ne1.shelf1.card1.shelf} slot operational-state"/>
        <v1 found="no" search="Error: application communication failure"/>
        <v2 found="no" search="Error: application error"/>
        <v3 found="no" search="Aborted: application communication failure"/>
        <v4 found="yes" search="operational-state up"/>
        <v5 found="yes" search="autoP.*true"/>
        <v6 found="yes" search="Commit complete"/>
        <v7 found="yes" search="pi unitName(.*)${network1.ne1.shelf1.shelfType}"/>
    </testdata>
    <testdata title="Initial_interface_creation" execute="yes" row="1">
        <command verify="v1,v2,v3,v4,v5"   send="set eqpt shelf 1 slot 0 subslot 0 port LCN1 pluggableInterfaceType 1GEX admin-status up" />
        <command verify="v1,v2,v3,v4,v5"   send="set eqpt shelf 1 slot 0 subslot 0 port LCN2 pluggableInterfaceType 1GEX admin-status up" />
        <command verify="v1,v2,v3,v4,v5"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} type ethernetCsmacd" />
        <command verify="v1,v2,v3,v4,v5"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} type ethernetCsmacd" />
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="Error: application communication failure"/>
        <v3 found="no" search="Error: application error"/>
        <v4 found="no" search="Aborted: application communication failure"/>
        <v5 found="no" search="error"/>
    </testdata>
    <testdata title="IPv4_IPv6_simultaneous_provision_deletion" execute="yes" row="1">
        <command verify="v1,v2,v3,v4,v5"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} type ip ipv4 address ${ip.ipv4_1} netmask ${Interface.InfIpv4netmask}" />
        <command verify="v1,v2,v3,v4,v5"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} type ip ipv6 address ${ip.ipv6_1} prefix-length ${Intf.prefix-length1}" />
        <command verify="v1,v2,v3,v4,v5,v6"   send="commit" />
        <command verify="v1,v2,v3,v4,v5,v7"   send="show interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v2,v3,v4,v5"   send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4" />
        <command verify="v1,v2,v3,v4,v5,v8,v55"   send="show interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v2,v3,v4,v5"   send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv6" />
        <command verify="v1,v2,v3,v4,v5,v55,v88"   send="show interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v2,v3,v4,v5"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} type ip ipv4 address ${ip.ipv4_1} netmask ${Interface.InfIpv4netmask}" />
        <command verify="v1,v2,v3,v4,v5"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} type ip ipv6 address ${ip.ipv6_1} prefix-length ${Intf.prefix-length1}" />
        <command verify="v1,v2,v3,v4,v5,v7"   send="show interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v2,v3,v4,v5"   send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv6"/>
        <command verify="v1,v2,v3,v4,v5,v9,v88"   send="show interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}" />
        <command verify="v1,v2,v3,v4,v5"   send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4" />
        <command verify="v1,v2,v3,v4,v5,v55,v88"   send="show interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v5"   send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v2,v3,v4,v5,v6"   send="commit" />
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="Error: application communication failure"/>
        <v3 found="no" search="Error: application error"/>
        <v4 found="no" search="Aborted: application communication failure"/>
        <v5 found="no" search="error"/>
        <v55 found="no" search=".*ipv4.*address.*"/>
        <v6 found="yes" search=".*Commit complete|No modifications to commit.*"/>
        <v7 found="yes" search="(?s)ipv4.*address.*${ip.ipv4_1}.*netmask.*${Interface.InfIpv4netmask}.*ipv6.*address.*${ip.ipv6_1}.*prefix-length.*${Intf.prefix-length1}"/>
        <v8 found="yes" search="(?s)ipv6.*address.*${ip.ipv6_1}.*prefix-length.*${Intf.prefix-length1}"/>
        <v88 found="no" search=".*ipv6.*address.*"/>
        <v9 found="yes" search="(?s)ipv4.*address.*${ip.ipv4_1}.*netmask.*${Interface.InfIpv4netmask}"/>
    </testdata>
    <testdata title="IPv6_address_on_NEM_denied" execute="yes" row="1">
        <command verify="v1,v2"   send="set interfaces interface ${Interface.NEM_Intf} type ip" />
        <command verify="v3,v4"   send="set interfaces interface ${Interface.NEM_Intf} type ip ipv6 address ${ip.ipv6_1} prefix-length ${Intf.prefix-length1}"/>
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="error"/>
        <v3 found="yes" search="error"/>
        <v4 found="yes" search="syntax error: element does not exist"/>
    </testdata>
    <testdata title="denial_same_IPv4/IPv6_address_on_LCN_and_LMP_interface" execute="yes" row="1">
        <command verify="v1,v2"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} type ip ipv4 address ${ip.ipv4_1} netmask ${Interface.InfIpv4netmask}"/>
        <command verify="v1,v2"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} type ip ipv4 address ${ip.ipv4_1} netmask ${Interface.InfIpv4netmask}"/>
        <command verify="v3,v4"   send="commit" />
        <command verify="v1,v2"   send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${ip.ipv4_1}"/>
        <command verify="v1,v2"   send="delete interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${ip.ipv4_1} "/>
        <command verify="v1,v2,v5"   send="commit"/>
        <command verify="v1,v2"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} type ip ipv6 address ${ip.ipv6_1} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v1,v2"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} type ip ipv6 address ${ip.ipv6_1} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v33,v4"   send="commit" />
        <command verify="v1,v2"   send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv6 address ${ip.ipv6_1}"/>
        <command verify="v1,v2"   send="delete interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv6 address ${ip.ipv6_1}"/>
        <command verify="v1,v2"   send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v2,v5"   send="commit"/>
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="error"/>
        <v3 found="yes" search="(?s)Aborted.*ip.*LCN1.*ipv4.*${ip.ipv4_1}.*inconsistent value.*Overlapping ipv4 network"/>
        <v33 found="yes" search="(?s)Aborted.*ipv6.*address.*${ip.ipv6_1}.*inconsistent value.*Overlapping ipv6 network"/>
        <v4 found="yes" search="error"/>
        <v5 found="yes" search=".*Commit complete|No modifications to commit.*"/>
    </testdata>
    <testdata title="link_local_address_LCN1_LMP" execute="yes" row="1">
        <command verify="v1,v2"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} type ip ipv4"/>
        <command verify="v1,v2"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} type ip ipv4"/>
        <command verify="v1,v2,v5"   send="commit"/>
        <command end="${oper_prompt.value}"  send="exit"/>
        <command verify="v1,v3" end="${oper_prompt.value}"  send="show interfaces-state interface  ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v33" end="${oper_prompt.value}"  send="show interfaces-state interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command send="configure"/>
        <command verify="v1,v2"   send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v2,v5"   send="commit" />
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="error"/>
        <v3 found="yes" search="(?s)ip.*LCN1.*IP.*fe80:.*link-layer.*"/>
        <v33 found="yes" search="(?s)ip.*LMP.*IP.*fe80:.*link-layer.*"/>
        <v4 found="yes" search="error"/>
        <v5 found="yes" search=".*Commit complete|No modifications to commit.*"/>
    </testdata>
    <testdata title="verify_management_interfaces_default" execute="yes" row="1">
        <command verify="v1,v2,v3,v4,v5,v6,v7,v8"   send="show interfaces interface ${network1.ne1.shelf1.LMP.int_name} " />
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="Error: application communication failure"/>
        <v3 found="no" search="Error: application error"/>
        <v4 found="no" search="Aborted: application communication failure"/>
        <v5 found="yes" search="duplex.*${duplex.full}"/>
        <v6 found="yes" search="loopback.*${loopback_state.disable}"/>
        <v7 found="yes" search="mtu.*${mtu.mtu1}"/>
        <v8 found="yes" search="auto-negotiation.*${auto_neg.enable}"/>
    </testdata>
    <testdata title="verify_management_interfaces_default" execute="yes" >
        <command verify="v1,v2,v3,v4,v5,v6,v7,v8,v9"   send="show interfaces interface ${network1.ne1.shelf1.LCN.int_name}"  />
        <command verify="v1,v2,v3,v4,v5,v6,v7,v8,v9"   send="show interfaces interface ${network1.ne1.shelf1.LMP.int_name} " />
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="Error: application communication failure"/>
        <v3 found="no" search="Error: application error"/>
        <v4 found="no" search="Aborted: application communication failure"/>
        <v5 found="yes" search="administrative-state.*${admin_state.up}"/>
        <v6 found="yes" search="duplex.*${duplex.full}"/>
        <v7 found="yes" search="loopback.*${loopback_state.disable}"/>
        <v8 found="yes" search="mtu.*${mtu.mtu1}"/>
        <v9 found="yes" search="auto-negotiation.*${auto_neg.enable}"/>
    </testdata>
    <testdata title="verify_management_ip_interfaces_default" execute="yes" row="2" >
        <command verify="v1,v2,v3,v4,v6,v7,v8"   send="show interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4" />
        <command verify="v1,v2,v3,v4,v6,v77,v88"   send="show interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 " />
        <command verify="v1"   send="show interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv6" />
        <command verify="v1"   send="show interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv6" />
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="Error: application communication failure"/>
        <v3 found="no" search="Error: application error"/>
        <v4 found="no" search="Aborted: application communication failure"/>
        <v6 found="yes" search="forwarding.*${ip_forward.false}"/>
        <v7 found="yes" search="address.*${ip_address.default1}"/>
        <v77 found="yes" search="address.*${ip_address.default2}"/>
        <v8 found="yes" search="prefix-length.*${prefix_length.default1}"/>
        <v88 found="yes" search="prefix-length.*${prefix_length.default2}"/>
        <v10 found="yes" search="No entries found"/>
    </testdata>
    <testdata title="verify_management_ip_interfaces_default" execute="yes" row="1">
        <command verify="v1,v2,v3,v4,v6,v75,v81"   send="show interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 " />
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="Error: application communication failure"/>
        <v3 found="no" search="Error: application error"/>
        <v4 found="no" search="Aborted: application communication failure"/>
        <v6 found="yes" search="forwarding.*${ip_forward.false}"/>
        <v75 found="yes" search="address.*${ip_address.default2}"/>
        <v81 found="yes" search="prefix-length.*${prefix_length.default1}"/>
        <v10 found="yes" search="No entries found"/>
    </testdata>
    <testdata title="prov_management_ip_interfaces" execute="yes" row="1">
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} type ip ipv4 enabled address ${network1.ne1.shelf1.LCN1.ip_address} netmask ${network1.ne1.shelf1.LCN1.netmask}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} type ip ipv4 enabled address ${network1.ne1.shelf1.LCN2.ip_address} netmask ${network1.ne1.shelf1.LCN2.netmask}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} type ip ipv4 enabled address ${network1.ne1.shelf1.LMP.ip_address} netmask ${network1.ne1.shelf1.LMP.netmask}" />
        <command verify="v14"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v7"   send="show interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4" />
        <command verify="v1,v2,v3,v4,v55,v77"   send="show interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4" />
        <command verify="v1,v2,v3,v4,v6,v8"   send="show interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4" />
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} type ip ipv6 enabled address ${network1.ne1.shelf1.LCN1.ipv6_address} prefix-length ${network1.ne1.shelf1.LCN1.prefix}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} type ip ipv6 enabled address ${network1.ne1.shelf1.LCN2.ipv6_address} prefix-length ${network1.ne1.shelf1.LCN2.prefix}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} type ip ipv6 enabled address ${network1.ne1.shelf1.LMP.ipv6_address} prefix-length ${network1.ne1.shelf1.LMP.prefix}"/>
        <command verify="v14"   send="commit"/>
        <command verify="v1,v2,v3,v4,v9,v11"   send="show interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv6" />
        <command verify="v1,v2,v3,v4,v99,v111"   send="show interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv6" />
        <command verify="v1,v2,v3,v4,v10,v12"   send="show interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv6" />
         <!-- oper show of LCN1,LCN2,LMP begins-->
        <command verify="v1" end="${config_prompt.value}" send="set clientv4 client-if ${network1.ne1.shelf1.LCN1.int_ip_name} enable false"/>
        <command verify="v1" end="${config_prompt.value}" send="set clientv6 client-if ${network1.ne1.shelf1.LCN1.int_ip_name} enable false"/>
        <command verify="v14" end="${config_prompt.value}" send="commit"/>
	<command verify="v1" end="${config_prompt.value}" send="show clientv4"/>
	<command verify="v1" end="${config_prompt.value}" send="show clientv6"/>
        <command verify="v1" end="${oper_prompt.value}" send="exit"/>
        <command verify="v1,v15" end="${oper_prompt.value}" send="show interfaces-state interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4"/>
        <command verify="v1,v16" end="${oper_prompt.value}" send="show interfaces-state interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4"/>
        <command verify="v1,v17" end="${oper_prompt.value}" send="show interfaces-state interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4"/>
        <command verify="v1,v18" end="${oper_prompt.value}" send="show interfaces-state interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv6"/>
        <command verify="v1,v19" end="${oper_prompt.value}" send="show interfaces-state interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv6"/>
        <command verify="v1,v20" end="${oper_prompt.value}" send="show interfaces-state interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv6"/>
        <command verify="v1" end="${config_prompt.value}" send="config"/>
        <command verify="v1" end="${config_prompt.value}" send="set clientv4 client-if ${network1.ne1.shelf1.LCN1.int_ip_name} enable true"/>
        <command verify="v1" end="${config_prompt.value}" send="set clientv6 client-if ${network1.ne1.shelf1.LCN1.int_ip_name} enable true"/>
        <command verify="v14" end="${config_prompt.value}" send="commit"/>
        <!-- oper show of LCN1,LCN2,LMP ends-->
	<command verify="v1"   send="delete interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${network1.ne1.shelf1.LMP.ip_address}"/>
        <command verify="v1"   send="delete interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv6 address ${network1.ne1.shelf1.LMP.ipv6_address}"/>
        <command verify="v14" end="${config_prompt.value}" send="commit"/>
	<v1 found="yes" search="ok"/>
        <v2 found="no" search="Error: application communication failure"/>
        <v3 found="no" search="Error: application error"/>
        <v4 found="no" search="Aborted: application communication failure"/>
        <v5 found="yes" search="address.*${network1.ne1.shelf1.LCN1.ip_address}"/>
        <v55 found="yes" search="address.*${network1.ne1.shelf1.LCN2.ip_address}"/>
        <v6 found="yes" search="address.*${network1.ne1.shelf1.LMP.ip_address}"/>
        <v7 found="yes" search="netmask.*${network1.ne1.shelf1.LCN1.netmask}"/>
        <v77 found="yes" search="netmask.*${network1.ne1.shelf1.LCN2.netmask}"/>
        <v8 found="yes" search="netmask.*${network1.ne1.shelf1.LMP.netmask}"/>
        <v9 found="yes" search="address.*${network1.ne1.shelf1.LCN1.ipv6_address}"/>
        <v99 found="yes" search="address.*${network1.ne1.shelf1.LCN2.ipv6_address}"/>
        <v10 found="yes" search="address.*${network1.ne1.shelf1.LMP.ipv6_address}"/>
        <v11 found="yes" search="prefix-length.*${network1.ne1.shelf1.LCN1.prefix}"/>
        <v111 found="yes" search="prefix-length.*${network1.ne1.shelf1.LCN2.prefix}"/>
        <v12 found="yes" search="prefix-length.*${network1.ne1.shelf1.LMP.prefix}"/>
        <v13  found="yes" search="forwarding.*${ip_forward.false}"/>
        <v14 found="yes" search="Commit complete"/>
	<v15 found="yes" search="${network1.ne1.shelf1.LCN1.ip_address}.*static.*24"/>
        <v16 found="yes" search="${network1.ne1.shelf1.LCN2.ip_address}.*static.*24"/>
        <v17 found="yes" search="${network1.ne1.shelf1.LMP.ip_address}.*static.*24"/>
        <v18 found="yes" search="${network1.ne1.shelf1.LCN1.ipv6_address}.*${network1.ne1.shelf1.LCN1.prefix}.*static"/>
        <v19 found="yes" search="${network1.ne1.shelf1.LCN2.ipv6_address}.*${network1.ne1.shelf1.LCN2.prefix}.*static"/>
        <v20 found="yes" search="${network1.ne1.shelf1.LMP.ipv6_address}.*${network1.ne1.shelf1.LMP.prefix}.*static"/>
    </testdata>
    
    
    <testdata title="Provision_static_route_with_nexthop_interface_LCN2" execute="yes" row="1">
        <command verify="v1"   send="commit"/>
        <command verify="v1"   send="set routing routing-instance 1 interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance ${routing.instance} routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.route1} next-hop outgoing-interface ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2,v3,v4,v5"     send="show routing routing-instance 1"/>
        <command verify="v1,v2,v8"     send="commit"/>
        <command verify="v1,v2"     send="set routing routing-instance ${routing.instance} routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.route2} next-hop outgoing-interface ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2,v3,v6,v7"     send="show routing routing-instance 1 | nom"/>
        <command verify="v1,v2,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.route1}"/>
        <command verify="v1,v2,v8"     send="commit"/>
        <command verify="v1,v2,v9"     send="show routing routing-instance 1  | nom"/>
        <command verify="v1,v2"     send="delete routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.route2}"/>
        <command verify="v1,v2,v8"     send="commit"/>
        <command verify="v1,v2,v10"     send="show routing routing-instance 1  | nom"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance ${routing.instance} routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.route1} next-hop outgoing-interface ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance ${routing.instance} routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.route2} next-hop outgoing-interface ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2,v3,v4,v5,v6,v7"     send="show routing routing-instance 1  | nom"/>
        <command verify="v1,v2,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes"/>
	<command verify="v1,v2,v8"     send="commit"/>
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="error"/>
        <v3 found="yes" search="type.*default-routing-instance"/>
        <v4 found="yes" search="route.*${routing.route1}"/>
        <v6 found="yes" search="route.*${routing.route2}"/>
        <v5 found="yes" search="outgoing-interface.*${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <v7 found="yes" search="outgoing-interface.*${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <v8 found="yes" search="Commit complete"/>
        <v9 found="no" search="route.*${routing.route1}"/>
        <v10 found="no" search="route.*${routing.route2}"/>
    </testdata>
    <testdata title="edit_verify_management_interfaces" execute="yes" >
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN.int_name} ethernet admin-status down speed ${speed.upper_range} duplex ${duplex.half} auto-negotiation ${auto_neg.disable} "/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet speed ${speed.upper_range} duplex ${duplex.half} auto-negotiation ${auto_neg.disable} "/>
        <command verify="v11"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v7,v9,v10"   send="show interfaces interface eth-1/0/0/LCN" />
        <command verify="v1,v2,v3,v4,v55,v7,v9,v10"   send="show interfaces interface ${network1.ne1.shelf1.LMP.int_name}"/>
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="Error: application communication failure"/>
        <v3 found="no" search="Error: application error"/>
        <v4 found="no" search="Aborted: application communication failure"/>
        <v5 found="yes" search="administrative-state.*down"/>
        <v55 found="yes" search="administrative-state.*up"/>
        <v7 found="yes" search="speed.*${speed.upper_range}"/>
        <v9 found="yes" search="duplex.*${duplex.half}"/>
        <v10 found="yes" search="auto-negotiation.*${auto_neg.disable}"/>
        <v11 found="yes" search="Commit complete"/>
    </testdata>
    <testdata title="edit_verify_management_interfaces" execute="yes" row="1">
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet speed ${speed.upper_range} duplex ${duplex.half} auto-negotiation ${auto_neg.disable} "/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet speed ${speed.upper_range} duplex ${duplex.half} auto-negotiation ${auto_neg.disable} "/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet speed ${speed.upper_range} duplex ${duplex.half} auto-negotiation ${auto_neg.disable} "/>
        <command verify="v11"   send="commit"/>
        <command verify="v1,v2,v3,v4,v7,v9,v10"   send="show interfaces interface ${network1.ne1.shelf1.LCN1.int_name}" />
        <command verify="v1,v2,v3,v4,v7,v9,v10"   send="show interfaces interface eth-1/0/0/LCN2" />
        <command verify="v1,v2,v3,v4,v7,v9,v10"   send="show interfaces interface ${network1.ne1.shelf1.LMP.int_name}"/>
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="Error: application communication failure"/>
        <v3 found="no" search="Error: application error"/>
        <v4 found="no" search="Aborted: application communication failure"/>
        <v7 found="yes" search="speed.*${speed.upper_range}"/>
        <v9 found="yes" search="duplex.*${duplex.half}"/>
        <v10 found="yes" search="auto-negotiation.*${auto_neg.disable}"/>
        <v11 found="yes" search="Commit complete"/>
    </testdata>
    <testdata title="edit_verify_management_ip_interfaces" execute="yes">
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN.int_ip_name} enabled ipv4 forwarding ${ip_forward.true} mtu ${mtu.mtu3}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} enabled ipv4 forwarding ${ip_forward.true} mtu ${mtu.mtu3}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN.int_ip_name} enabled ipv6 forwarding ${ip_forward.true} mtu ${mtu.mtu3}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} enabled ipv6 forwarding ${ip_forward.true} mtu ${mtu.mtu3}"/>
        <command verify="v8"   send="commit"/>
        <command verify="v1,v2,v5,v6,v7,v10"   send="show interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4"/>
        <command verify="v1,v2,v5,v6,v7,v10"   send="show interfaces interface ${network1.ne1.shelf1.LCN.int_ip_name} ipv4"/>
        <command verify="v1,v2,v5,v6,v7,v10"   send="show interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv6"/>
        <command verify="v1,v2,v5,v6,v7,v10"   send="show interfaces interface ${network1.ne1.shelf1.LCN.int_ip_name} ipv6"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="forwarding.*${ip_forward.true}"/>
        <v5 found="no" search="Error: application communication failure"/>
        <v6 found="no" search="Error: application error"/>
        <v7 found="no" search="Aborted: application communication failure"/>
        <v10 found="yes" search="mtu.*${mtu.mtu3}"/>
        <v8 found="yes" search="Commit complete"/>
    </testdata>
    <testdata title="edit_verify_management_ip_interfaces" execute="yes" row="1">
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} enabled ipv4 forwarding ${ip_forward.true} mtu ${mtu.mtu3}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} enabled ipv4 forwarding ${ip_forward.true} mtu ${mtu.mtu3}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} enabled ipv4 forwarding ${ip_forward.true} mtu ${mtu.mtu3}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} enabled ipv6 forwarding ${ip_forward.true} mtu ${mtu.mtu3}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} enabled ipv6 forwarding ${ip_forward.true} mtu ${mtu.mtu3}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} enabled ipv6 forwarding ${ip_forward.true} mtu ${mtu.mtu3}"/>
        <command verify="v8"   send="commit"/>
        <command verify="v1,v2,v5,v6,v7,v10"   send="show interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4"/>
        <command verify="v1,v2,v5,v6,v7,v10"   send="show interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4"/>
        <command verify="v1,v2,v5,v6,v7,v10"   send="show interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4"/>
        <command verify="v1,v2,v5,v6,v7,v10"   send="show interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv6"/>
        <command verify="v1,v2,v5,v6,v7,v10"   send="show interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv6"/>
        <command verify="v1,v2,v5,v6,v7,v10"   send="show interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv6"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="forwarding.*${ip_forward.true}"/>
        <v5 found="no" search="Error: application communication failure"/>
        <v6 found="no" search="Error: application error"/>
        <v7 found="no" search="Aborted: application communication failure"/>
        <v10 found="yes" search="mtu.*${mtu.mtu3}"/>
        <v8 found="yes" search="Commit complete"/>
    </testdata>
    <testdata title="configure_management_interfaces_to_default" execute="yes" row="2">
        <command verify="v1"   send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1"   send="delete interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1"   send="delete interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv6"/>
        <command verify="v1"   send="delete interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address 10.10.10.104"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet speed ${speed.lower_range} duplex ${duplex.full} auto-negotiation ${auto_neg.enable}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} enabled ipv4 forwarding ${ip_forward.false} mtu ${mtu.mtu2}"/>
        <command verify="v8"   send="commit" />
        <v8 found="yes" search="Commit complete"/>
        <v1 found="yes" search="ok"/>
    </testdata>
    <testdata title="configure_management_interfaces_to_default" execute="yes" row="1">
        <command verify="v1"   send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <!-- <command verify="v1"   send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv6"/><command verify="v1"   send="delete interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv6"/> ### ISSUE with delete. Connction lost when delete ipv6-->
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} enabled ipv4 forwarding ${ip_forward.false} mtu ${mtu.mtu2}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} enabled ipv6 forwarding ${ip_forward.false} mtu ${mtu.mtu2}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} enabled ipv4 forwarding ${ip_forward.false} mtu ${mtu.mtu2}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} enabled ipv6 forwarding ${ip_forward.false} mtu ${mtu.mtu2}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet speed ${speed.lower_range} duplex ${duplex.full} auto-negotiation ${auto_neg.enable}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet speed ${speed.lower_range} duplex ${duplex.full} auto-negotiation ${auto_neg.enable}"/>
        <command verify="v8"   send="commit" />
        <v8 found="yes" search="Commit complete"/>
        <v1 found="yes" search="ok"/>
    </testdata>
    <testdata title="verify_management_interfaces_default" execute="yes" >
        <command verify="v1,v2,v3,v4,v5,v6,v7,v8,v9"   send="show interfaces interface ${network1.ne1.shelf1.LCN.int_name}"  />
        <command verify="v1,v2,v3,v4,v5,v6,v7,v8,v9"   send="show interfaces interface ${network1.ne1.shelf1.LMP.int_name} " />
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="Error: application communication failure"/>
        <v3 found="no" search="Error: application error"/>
        <v4 found="no" search="Aborted: application communication failure"/>
        <v5 found="yes" search="administrative-state.*${admin_state.up}"/>
        <v6 found="yes" search="duplex.*${duplex.full}"/>
        <v7 found="yes" search="loopback.*${loopback_state.disable}"/>
        <v8 found="yes" search="mtu.*${mtu.mtu1}"/>
        <v9 found="yes" search="auto-negotiation.*${auto_neg.enable}"/>
    </testdata>
    <testdata title="verify_management_interfaces_default" execute="yes" row="1">
        <command verify="v1,v2,v3,v4,v5,v6,v7,v8"   send="show interfaces interface ${network1.ne1.shelf1.LMP.int_name} " />
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="Error: application communication failure"/>
        <v3 found="no" search="Error: application error"/>
        <v4 found="no" search="Aborted: application communication failure"/>
        <v5 found="yes" search="duplex.*${duplex.full}"/>
        <v6 found="yes" search="loopback.*${loopback_state.disable}"/>
        <v7 found="yes" search="mtu.*${mtu.mtu1}"/>
        <v8 found="yes" search="auto-negotiation.*${auto_neg.enable}"/>
    </testdata>
    <testdata title="verify_management_ip_interfaces_default" execute="yes" row="2" >
        <command verify="v1,v2,v3,v4,v6,v7,v8"   send="show interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4" />
        <command verify="v1,v2,v3,v4,v6,v77,v88"   send="show interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 " />
        <command verify="v1"   send="show interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv6" />
        <command verify="v1"   send="show interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv6" />
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="Error: application communication failure"/>
        <v3 found="no" search="Error: application error"/>
        <v4 found="no" search="Aborted: application communication failure"/>
        <v6 found="yes" search="forwarding.*${ip_forward.false}"/>
        <v7 found="yes" search="address.*${ip_address.default1}"/>
        <v77 found="yes" search="address.*${ip_address.default2}"/>
        <v8 found="yes" search="prefix-length.*${prefix_length.default1}"/>
        <v88 found="yes" search="prefix-length.*${prefix_length.default2}"/>
        <v10 found="yes" search="No entries found"/>
    </testdata>
    <testdata title="verify_management_ip_interfaces_default" execute="yes" row="1">
        <command verify="v1,v2,v3,v4,v6,v75,v81"   send="show interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 " />
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="Error: application communication failure"/>
        <v3 found="no" search="Error: application error"/>
        <v4 found="no" search="Aborted: application communication failure"/>
        <v6 found="yes" search="forwarding.*${ip_forward.false}"/>
        <v75 found="yes" search="address.*${ip_address.default2}"/>
        <v81 found="yes" search="prefix-length.*${prefix_length.default1}"/>
        <v10 found="yes" search="No entries found"/>
    </testdata>
    <testdata title="static_route_provision_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance 1 interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} | nomore"/>
        <command verify="v1"   send="set routing routing-instance 1 interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} | nomore"/>
        <command verify="v1"   send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${ipv4_route.route1} next-hop next-hop-address ${nxt_hop.hop1}"/>
        <command verify="v1"   send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${ipv4_route.route2} next-hop next-hop-address ${nxt_hop.hop2}"/>
        <command verify="v1"   send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${ipv4_route.route3} next-hop outgoing-interface ${nxt_hop_intf.lcn1}"/>
        <command verify="v1"   send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${ipv4_route.route4} next-hop outgoing-interface ${nxt_hop_intf.lmp}"/>
        <command verify="v1"   send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${ipv6_route.route1} next-hop next-hop-address ${nxt_hop6.hop1}"/>
        <command verify="v1"   send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${ipv6_route.route2} next-hop next-hop-address ${nxt_hop6.hop2}"/>
        <command verify="v1"   send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${ipv6_route.route3} next-hop outgoing-interface ${nxt_hop_intf6.lcn1}"/>
        <command verify="v1"   send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${ipv6_route.route4} next-hop outgoing-interface ${nxt_hop_intf6.lmp}"/>
        <command verify="v13"   send="commit"/>
        <!-- Verification for "Single routing protocol instance" -->
        <command verify="v1" end="${config_prompt.value}" send="set routing routing-instance 2"/>
        <command verify="v23,v14" end="${config_prompt.value}" send="commit"/>
        <command verify="v1" end="${config_prompt.value}" send="delete  routing routing-instance 2"/>
        <command verify="v16" end="${config_prompt.value}" send="commit"/>
        <!-- Verification for "Single static routing instance" -->
        <command verify="v1" end="${config_prompt.value}" send="set routing routing-instance 1 routing-protocols routing-protocol static FNC1"/>
        <command verify="v23,v15" end="${config_prompt.value}" send="commit"/>
        <command verify="v1" end="${config_prompt.value}" send="delete routing routing-instance 1 routing-protocols routing-protocol static FNC1"/>
        <command verify="v16" end="${config_prompt.value}" send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12" end="${config_prompt.value}" send="show routing  | nom"/>
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="Error: application communication failure"/>
        <v3 found="no" search="Error: application error"/>
        <v4 found="no" search="Aborted: application communication failure"/>
        <v5 found="yes" search="route.*${ipv4_route.route1}"/>
        <v6 found="yes" search="route.*${ipv4_route.route2}"/>
        <v7 found="yes" search="route.*${ipv4_route.route3}"/>
        <v8 found="yes" search="route.*${ipv4_route.route4}"/>
        <v9 found="yes" search="route.*${ipv6_route.route1}"/>
        <v10 found="yes" search="route.*${ipv6_route.route2}"/>
        <v11 found="yes" search="route.*${ipv6_route.route3}"/>
        <v12 found="yes" search="route.*${ipv6_route.route4}"/>
        <v13 found="yes" search="Commit complete"/>
        <v14 found="yes" search="(?s)Aborted.*too many.*routing routing-instance.*2.*configured.*at most 1 must be configured"/>
        <v15 found="yes" search="(?s)Aborted.*routing.*static FNC1.*can have at max 1 static route protocol per routing instance"/>
	<v23 found="yes" search="(?s).*Error.*|.*error.*|.*Aborted.*"/>
	<v16 found="yes" search="No modifications to commit"/>
    </testdata>
    <testdata title="static_route_deprovision_verify" execute="yes" row="1">
        <command verify="v1"   send="delete routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${ipv4_route.route1}"/>
        <command verify="v1"   send="delete routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${ipv4_route.route2}"/>
        <command verify="v1"   send="delete routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${ipv4_route.route3}"/>
        <command verify="v1"   send="delete routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${ipv4_route.route4}"/>
        <command verify="v1"   send="delete routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${ipv6_route.route1}"/>
        <command verify="v1"   send="delete routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${ipv6_route.route2}"/>
        <command verify="v1"   send="delete routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${ipv6_route.route3}"/>
        <command verify="v1"   send="delete routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${ipv6_route.route4}"/>
        <command verify="v1"   send="delete routing routing-instance 1 interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1"   send="delete routing routing-instance 1 interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1"   send="show routing  | nom"/>
        <command verify="v1,v13"   send="commit"/>
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="Error: application communication failure"/>
        <v3 found="no" search="Error: application error"/>
        <v4 found="no" search="Aborted: application communication failure}"/>
        <v5 found="no" search="route.*${ipv4_route.route1}"/>
        <v6 found="no" search="route.*${ipv4_route.route2}"/>
        <v7 found="no" search="route.*${ipv4_route.route3}"/>
        <v8 found="no" search="route.*${ipv4_route.route4}"/>
        <v9 found="no" search="route.*${ipv6_route.route1}"/>
        <v10 found="no" search="route.*${ipv6_route.route2}"/>
        <v11 found="no" search="route.*${ipv6_route.route3}"/>
        <v12 found="no" search="route.*${ipv6_route.route4}"/>
        <v13 found="yes" search="Commit complete"/>
        <v14 found="yes" search="No entries found"/>
    </testdata>
    <testdata title="dhcp_client_enable_disable_delete"  execute="yes" row="1">
        <command verify="v1,v2,v3"     send="show ${dhcp.client1} client-if ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v2,v3"     send="show ${dhcp.client1} client-if ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2,v88"   send="show ${dhcp.client2} client-if ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v2,v99"   send="show ${dhcp.client2} client-if ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2"   send="set eqpt shelf 1 slot 0 subslot 0 port LCN1 pluggableInterfaceType 1GEX admin-status up"/>
        <command verify="v1,v2"   send="set eqpt shelf 1 slot 0 subslot 0 port LCN2 pluggableInterfaceType 1GEX admin-status up"/>
        <command verify="v1,v2"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} type ethernetCsmacd ethernet speed 1000"/>
        <command verify="v1,v2"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} type ethernetCsmacd ethernet speed 1000"/>
        <command verify="v1,v2"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} type ip ipv4 address 1.1.1.1 netmask 255.255.255.0"/>
        <command verify="v1,v2"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} type ip ipv6 address 1::1 prefix-length 128"/>
        <command verify="v1,v2"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} type ip ipv4 enabled"/>
        <command verify="v1,v2"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} type ip ipv6 enabled"/>
        <command verify="v1,v2,v3"     send="show ${dhcp.client1} client-if ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v2"     send="set ${dhcp.client1} client-if ${network1.ne1.shelf1.LCN1.int_ip_name} enable ${dhcp.en_false}"/>
        <command verify="v1,v2,v7"   send="commit"/>
        <command verify="v1,v2,v4"     send="show ${dhcp.client1} client-if ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v2"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} type ip ipv4 address 12.1.1.1 netmask 255.255.255.0"/>
        <command verify="v1,v2"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} type ip ipv6 address 2::2 prefix-length 128"/>
        <command verify="v1,v2"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} type ip ipv4 enabled"/>
        <command verify="v1,v2"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} type ip ipv6 enabled"/>
        <command verify="v1,v2,v3"     send="show ${dhcp.client1} client-if ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2"     send="set ${dhcp.client1} client-if ${network1.ne1.shelf1.LCN2.int_ip_name} enable ${dhcp.en_false}"/>
        <command verify="v1,v2,v7"   send="commit"/>
        <command verify="v1,v2,v4"     send="show ${dhcp.client1} client-if ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2"     send="set ${dhcp.client1} client-if ${network1.ne1.shelf1.LCN1.int_ip_name} enable ${dhcp.en_true}"/>
        <command verify="v1,v2,v7"   send="commit"/>
        <command verify="v1,v2,v3"     send="show ${dhcp.client1} client-if ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v2"     send="set ${dhcp.client1} client-if ${network1.ne1.shelf1.LCN2.int_ip_name} enable ${dhcp.en_true}"/>
        <command verify="v1,v2,v7"   send="commit"/>
        <command verify="v1,v2,v3"     send="show ${dhcp.client1} client-if ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2"   send="set ${dhcp.client2} client-if ${network1.ne1.shelf1.LCN1.int_ip_name} enable ${dhcp.en_true} duid ${dhcp.duid1} rapid-commit ${dhcp.en_true}"/>
        <command verify="v1,v2,v7"   send="commit"/>
        <command verify="v1,v2,v8"   send="show ${dhcp.client2} client-if ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v2"   send="set ${dhcp.client2} client-if ${network1.ne1.shelf1.LCN2.int_ip_name} enable ${dhcp.en_true} duid ${dhcp.duid2} rapid-commit ${dhcp.en_true}"/>
        <command verify="v1,v2"   send="commit"/>
        <command verify="v1,v2,v9"   send="show ${dhcp.client2} client-if ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2"   send="set ${dhcp.client2} client-if ${network1.ne1.shelf1.LCN1.int_ip_name} enable ${dhcp.en_false} duid ${dhcp.duid3} rapid-commit ${dhcp.en_false}"/>
        <command verify="v1,v2,v7"   send="commit"/>
        <command verify="v1,v2,v81"   send="show ${dhcp.client2} client-if ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v2"   send="set ${dhcp.client2} client-if ${network1.ne1.shelf1.LCN2.int_ip_name} enable ${dhcp.en_false} duid ${dhcp.duid4} rapid-commit ${dhcp.en_false} "/>
        <command verify="v1,v2"   send="commit"/>
        <command verify="v1,v2,v91"   send="show ${dhcp.client2} client-if ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2"   send="set ${dhcp.client2} client-if ${network1.ne1.shelf1.LCN1.int_ip_name} enable ${dhcp.en_true} duid ${dhcp.duid1}  rapid-commit ${dhcp.en_true}"/>
        <command verify="v1,v2,v7"   send="commit"/>
        <command verify="v1,v2,v8"   send="show ${dhcp.client2} client-if ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v2"   send="set ${dhcp.client2} client-if ${network1.ne1.shelf1.LCN2.int_ip_name} enable ${dhcp.en_true} duid ${dhcp.duid2} rapid-commit ${dhcp.en_true}"/>
        <command verify="v1,v2"   send="commit"/>
        <command verify="v1,v2,v9"   send="show ${dhcp.client2} client-if ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2"   send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v2"   send="delete interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2"   send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_name}"/>
        <command verify="v1,v2"   send="delete interfaces interface ${network1.ne1.shelf1.LCN2.int_name}"/>
        <command verify="v1,v2"   send="commit"/>
        <command verify="v1,v2,v10"   send="show int int"/>
        <command verify="v1,v2"   send="delete eqpt shelf 1 slot 0 subslot 0 port LCN1"/>
        <command verify="v1,v2"   send="delete eqpt shelf 1 slot 0 subslot 0 port LCN2"/>
        <command verify="v1,v2"   send="commit"/>
        <command verify="v1,v2,v11"   send="show eqpt"/>
        <v3 found="yes" search="enable(.*)${dhcp.en_true}"/>
        <v4 found="yes" search="enable(.*)${dhcp.en_false}"/>
        <v5 found="yes" search="error(.*)element does not exist"/>
        <v6 found="yes" search="No entries found."/>
        <v7 found="yes" search=".*Commit complete|No modifications to commit.*"/>
        <v8 found="yes" search="(?s)client-if ip.*LCN1.*duid.*abcdabcd101000.*enable.*${dhcp.en_true}.*rapid-commit.*${dhcp.en_true}"/>
        <v9 found="yes" search="(?s)client-if ip.*LCN2.*duid.*abcdabcd201000.*enable.*${dhcp.en_true}.*rapid-commit.*${dhcp.en_true}"/>
        <v88 found="yes" search="(?s)client-if ip.*LCN1.*duid.*enable.*${dhcp.en_true}.*rapid-commit.*${dhcp.en_true}"/>
        <v99 found="yes" search="(?s)client-if ip.*LCN2.*duid.*enable.*${dhcp.en_true}.*rapid-commit.*${dhcp.en_true}"/>
        <v81 found="yes" search="(?s)client-if ip.*LCN1.*duid.*abcdabcd301000.*enable.*${dhcp.en_false}.*rapid-commit.*${dhcp.en_false}"/>
        <v91 found="yes" search="(?s)client-if ip.*LCN2.*duid.*abcdabcd401000.*enable.*${dhcp.en_false}.*rapid-commit.*${dhcp.en_false}"/>
        <v10 found="no" search="(?s).*${network1.ne1.shelf1.LCN1.int_ip_name}.*|.*${network1.ne1.shelf1.LCN2.int_ip_name}.*|.*${network1.ne1.shelf1.LCN1.int_name}.*|.*${network1.ne1.shelf1.LCN2.int_name}.*"/>
        <v11 found="no" search=".*LCN1.*|.*LCN2.*"/>
    </testdata>
    <testdata title="provision_LCN1_with_invalid_ipv4address" execute="yes" row="1">
        <command verify="v1"   send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v2,v4,v5,v6"   send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} type ip ipv4"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${Intf.invalid_ip1} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${Intf.invalid_ip1}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${Intf.invalid_ip2} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${Intf.invalid_ip2}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${Intf.invalid_ip3} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${Intf.invalid_ip3}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${Intf.invalid_ip4} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${Intf.invalid_ip4}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${Intf.invalid_ip5} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${Intf.invalid_ip5}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${Intf.invalid_ip6} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${Intf.invalid_ip6}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${Intf.invalid_ip7} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${Intf.invalid_ip7}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${Intf.invalid_ip8} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${Intf.invalid_ip8}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v8,v10"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${Intf.invalid_ip9} netmask ${Intf.netmask1}"/>
        <command verify="v8,v11"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${Intf.invalid_ip10} netmask ${Intf.netmask1}"/>
        <command verify="v8,v12"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${Intf.invalid_ip11} netmask ${Intf.netmask1}"/>
        <command verify="v8,v13"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${Intf.invalid_ip12} netmask ${Intf.netmask1}"/>
        <command verify="v8,v14"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${Intf.invalid_ip13} netmask ${Intf.netmask1}"/>
        <command verify="v8,v15"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${Intf.invalid_ip14} netmask ${Intf.netmask1}"/>
        <command verify="v8,v16"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 address ${Intf.invalid_ip15} netmask ${Intf.netmask1}"/>
        <command verify="v1"     send="commit"/>
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="error"/>
        <v3 found="yes" search="Invalid ipv4 address"/>
        <v4 found="no" search="Error: application communication failure"/>
        <v5 found="no" search="Error: application error"/>
        <v6 found="no" search="Aborted: application communication failure"/>
        <v7 found="yes" search="Commit complete"/>
        <v8 found="yes" search="error"/>
        <v9 found="yes" search=".*ommit.*"/>
        <v10 found="yes" search="syntax error.*${Intf.invalid_ip9}.*"/>
        <v11 found="yes" search="syntax error.*${Intf.invalid_ip10}.*"/>
        <v12 found="yes" search="syntax error.*${Intf.invalid_ip11}.*"/>
        <v13 found="yes" search="syntax error.*${Intf.invalid_ip12}.*"/>
        <v14 found="yes" search="syntax error.*${Intf.invalid_ip13}.*"/>
        <v15 found="yes" search="syntax error.*${Intf.invalid_ip14}.*"/>
        <v16 found="yes" search="syntax error.*${Intf.invalid_ip15}.*"/>
    </testdata>
    <testdata title="provision_LCN2_with_invalid_ipv4address" execute="yes" row="1">
	<command verify="v1"   send="delete interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1"   send="delete routing routing-instance 1 interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2,v4,v5,v7,v6"   send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} type ip ipv4"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 address ${Intf.invalid_ip1} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 address ${Intf.invalid_ip1}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 address ${Intf.invalid_ip2} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 address ${Intf.invalid_ip2}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 address ${Intf.invalid_ip3} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 address ${Intf.invalid_ip3}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 address ${Intf.invalid_ip4} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 address ${Intf.invalid_ip4}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 address ${Intf.invalid_ip5} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 address ${Intf.invalid_ip5}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 address ${Intf.invalid_ip6} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 address ${Intf.invalid_ip6}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 address ${Intf.invalid_ip7} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 address ${Intf.invalid_ip7}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 address ${Intf.invalid_ip8} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 address ${Intf.invalid_ip8}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v8,v10"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 address ${Intf.invalid_ip9} netmask ${Intf.netmask1}"/>
        <command verify="v8,v11"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 address ${Intf.invalid_ip10} netmask ${Intf.netmask1}"/>
        <command verify="v8,v12"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 address ${Intf.invalid_ip11} netmask ${Intf.netmask1}"/>
        <command verify="v8,v13"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 address ${Intf.invalid_ip12} netmask ${Intf.netmask1}"/>
        <command verify="v8,v14"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 address ${Intf.invalid_ip13} netmask ${Intf.netmask1}"/>
        <command verify="v8,v15"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 address ${Intf.invalid_ip14} netmask ${Intf.netmask1}"/>
        <command verify="v8,v16"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 address ${Intf.invalid_ip15} netmask ${Intf.netmask1}"/>
        <command verify="v1"     send="commit"/>
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="error"/>
        <v3 found="yes" search="Invalid ipv4 address"/>
        <v4 found="no" search="Error: application communication failure"/>
        <v5 found="no" search="Error: application error"/>
        <v6 found="no" search="Aborted: application communication failure"/>
        <v7 found="yes" search="Commit complete"/>
        <v8 found="yes" search="error"/>
        <v9 found="yes" search=".*ommit.*"/>
        <v10 found="yes" search="syntax error.*${Intf.invalid_ip9}.*"/>
        <v11 found="yes" search="syntax error.*${Intf.invalid_ip10}.*"/>
        <v12 found="yes" search="syntax error.*${Intf.invalid_ip11}.*"/>
        <v13 found="yes" search="syntax error.*${Intf.invalid_ip12}.*"/>
        <v14 found="yes" search="syntax error.*${Intf.invalid_ip13}.*"/>
        <v15 found="yes" search="syntax error.*${Intf.invalid_ip14}.*"/>
        <v16 found="yes" search="syntax error.*${Intf.invalid_ip15}.*"/>
    </testdata>
    <testdata title="provision_LMP_with_invalid_ipv4address" execute="yes" row="1">
        <command verify="v1,v2,v4,v5,v9,v6"   send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${Intf.invalid_ip1} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${Intf.invalid_ip1}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${Intf.invalid_ip2} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${Intf.invalid_ip2}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${Intf.invalid_ip3} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${Intf.invalid_ip3}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${Intf.invalid_ip4} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${Intf.invalid_ip4}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${Intf.invalid_ip5} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${Intf.invalid_ip5}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${Intf.invalid_ip6} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${Intf.invalid_ip6}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${Intf.invalid_ip7} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${Intf.invalid_ip7}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${Intf.invalid_ip8} netmask ${Intf.netmask1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${Intf.invalid_ip8}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v8,v10"     send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${Intf.invalid_ip9} netmask ${Intf.netmask1}"/>
        <command verify="v8,v11"     send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${Intf.invalid_ip10} netmask ${Intf.netmask1}"/>
        <command verify="v8,v12"     send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${Intf.invalid_ip11} netmask ${Intf.netmask1}"/>
        <command verify="v8,v13"     send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${Intf.invalid_ip12} netmask ${Intf.netmask1}"/>
        <command verify="v8,v14"     send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${Intf.invalid_ip13} netmask ${Intf.netmask1}"/>
        <command verify="v8,v15"     send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${Intf.invalid_ip14} netmask ${Intf.netmask1}"/>
        <command verify="v8,v16"     send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv4 address ${Intf.invalid_ip15} netmask ${Intf.netmask1}"/>
        <command verify="v1"     send="commit"/>
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="error"/>
        <v3 found="yes" search="Invalid ipv4 address"/>
        <v4 found="no" search="Error: application communication failure"/>
        <v5 found="no" search="Error: application error"/>
        <v6 found="no" search="Aborted: application communication failure"/>
        <v7 found="yes" search="Commit complete"/>
        <v8 found="yes" search="error"/>
        <v9 found="yes" search=".*ommit.*"/>
        <v10 found="yes" search="syntax error.*${Intf.invalid_ip9}.*"/>
        <v11 found="yes" search="syntax error.*${Intf.invalid_ip10}.*"/>
        <v12 found="yes" search="syntax error.*${Intf.invalid_ip11}.*"/>
        <v13 found="yes" search="syntax error.*${Intf.invalid_ip12}.*"/>
        <v14 found="yes" search="syntax error.*${Intf.invalid_ip13}.*"/>
        <v15 found="yes" search="syntax error.*${Intf.invalid_ip14}.*"/>
        <v16 found="yes" search="syntax error.*${Intf.invalid_ip15}.*"/>
    </testdata>
    <testdata title="provision_LMP_with_invalid_ipv6address" execute="yes" row="1">
        <command verify="v1,v2,v4,v5,v9,v6"   send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv6 address ${Intf.invalid_ipv61} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv6 address ${Intf.invalid_ipv61}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv6 address ${Intf.invalid_ipv62} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv6 address ${Intf.invalid_ipv62}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv6 address ${Intf.invalid_ipv63} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv6 address ${Intf.invalid_ipv63}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv6 address ${Intf.invalid_ipv64} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv6 address ${Intf.invalid_ipv64}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v8,v10"     send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv6 address ${Intf.invalid_ipv65} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v8,v11"     send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv6 address ${Intf.invalid_ipv66} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v8,v12"     send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv6 address ${Intf.invalid_ipv67} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v8,v13"     send="set interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv6 address ${Intf.invalid_ipv68} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name} ipv6"/>
        <command verify="v1"     send="commit"/>
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="error"/>
        <v3 found="yes" search="Invalid ipv6 address"/>
        <v4 found="no" search="Error: application communication failure"/>
        <v5 found="no" search="Error: application error"/>
        <v6 found="no" search="Aborted: application communication failure"/>
        <v7 found="yes" search="Commit complete"/>
        <v8 found="yes" search="error"/>
        <v9 found="yes" search=".*ommit.*"/>
        <v10 found="yes" search="syntax error.*${Intf.invalid_ipv65}.*"/>
        <v11 found="yes" search="syntax error.*${Intf.invalid_ipv66}.*"/>
        <v12 found="yes" search="syntax error.*${Intf.invalid_ipv67}.*"/>
        <v13 found="yes" search="syntax error.*${Intf.invalid_ipv68}.*"/>
    </testdata>
    <testdata title="provision_LCN1_with_invalid_ipv6address" execute="yes" row="1">
        <command verify="v1,v2,v4,v5,v9,v6"   send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv6 address ${Intf.invalid_ipv61} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv6 address ${Intf.invalid_ipv61}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv6 address ${Intf.invalid_ipv62} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv6 address ${Intf.invalid_ipv62}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv6 address ${Intf.invalid_ipv63} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv6 address ${Intf.invalid_ipv63}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv6 address ${Intf.invalid_ipv64} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv6 address ${Intf.invalid_ipv64}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v8,v10"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv6 address ${Intf.invalid_ipv65} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v8,v11"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv6 address ${Intf.invalid_ipv66} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v8,v12"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv6 address ${Intf.invalid_ipv67} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v8,v13"     send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv6 address ${Intf.invalid_ipv68} prefix-length ${Intf.prefix-length1}"/>
        <command verify=""     send="commit"/>
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="error"/>
        <v3 found="yes" search="Invalid ipv6 address"/>
        <v4 found="no" search="Error: application communication failure"/>
        <v5 found="no" search="Error: application error"/>
        <v6 found="no" search="Aborted: application communication failure"/>
        <v7 found="yes" search="Commit complete"/>
        <v8 found="yes" search="error"/>
        <v9 found="yes" search=".*ommit.*"/>
        <v10 found="yes" search="syntax error.*${Intf.invalid_ipv65}.*"/>
        <v11 found="yes" search="syntax error.*${Intf.invalid_ipv66}.*"/>
        <v12 found="yes" search="syntax error.*${Intf.invalid_ipv67}.*"/>
        <v13 found="yes" search="syntax error.*${Intf.invalid_ipv68}.*"/>
    </testdata>
    <testdata title="provision_LCN2_with_invalid_ipv6address" execute="yes" row="1">
        <command verify="v1,v2,v4,v5,v9,v6"   send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv6 address ${Intf.invalid_ipv61} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv6 address ${Intf.invalid_ipv61}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv6 address ${Intf.invalid_ipv62} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv6 address ${Intf.invalid_ipv62}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv6 address ${Intf.invalid_ipv63} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv6 address ${Intf.invalid_ipv63}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv6 address ${Intf.invalid_ipv64} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v3,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv6 address ${Intf.invalid_ipv64}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v8,v10"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv6 address ${Intf.invalid_ipv65} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v8,v11"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv6 address ${Intf.invalid_ipv66} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v8,v12"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv6 address ${Intf.invalid_ipv67} prefix-length ${Intf.prefix-length1}"/>
        <command verify="v8,v13"     send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv6 address ${Intf.invalid_ipv68} prefix-length ${Intf.prefix-length1}"/>
        <command verify=""     send="commit"/>
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="error"/>
        <v3 found="yes" search="Invalid ipv6 address"/>
        <v4 found="no" search="Error: application communication failure"/>
        <v5 found="no" search="Error: application error"/>
        <v6 found="no" search="Aborted: application communication failure"/>
        <v7 found="yes" search="Commit complete"/>
        <v8 found="yes" search="error"/>
        <v9 found="yes" search=".*ommit.*"/>
        <v10 found="yes" search="syntax error.*${Intf.invalid_ipv65}.*"/>
        <v11 found="yes" search="syntax error.*${Intf.invalid_ipv66}.*"/>
        <v12 found="yes" search="syntax error.*${Intf.invalid_ipv67}.*"/>
        <v13 found="yes" search="syntax error.*${Intf.invalid_ipv68}.*"/>
    </testdata>
    <testdata title="provision_NEM_with_invalid_ipv4address" execute="yes" row="1">
        <command verify="v1,v2"   send="set interfaces interface ${Interface.NEM_Intf} type ip ipv4"/>
        <command verify="v1,v2,v4,v5,v9,v6"   send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${Interface.NEM_Intf} ipv4 address ${Intf.invalid_ip1} netmask ${Intf.netmask1} preferred true"/>
        <command verify="v3,v8,v17"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${Interface.NEM_Intf} ipv4 address ${Intf.invalid_ip1}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${Interface.NEM_Intf} ipv4 address ${Intf.invalid_ip2} netmask ${Intf.netmask1} preferred true"/>
        <command verify="v3,v8,v17"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${Interface.NEM_Intf} ipv4 address ${Intf.invalid_ip2}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${Interface.NEM_Intf} ipv4 address ${Intf.invalid_ip3} netmask ${Intf.netmask1} preferred true"/>
        <command verify="v3,v8,v17"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${Interface.NEM_Intf} ipv4 address ${Intf.invalid_ip3}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${Interface.NEM_Intf} ipv4 address ${Intf.invalid_ip4} netmask ${Intf.netmask1} preferred true"/>
        <command verify="v3,v8,v17"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${Interface.NEM_Intf} ipv4 address ${Intf.invalid_ip4}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${Interface.NEM_Intf} ipv4 address ${Intf.invalid_ip5} netmask ${Intf.netmask1} preferred true"/>
        <command verify="v3,v8,v17"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${Interface.NEM_Intf} ipv4 address ${Intf.invalid_ip5}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${Interface.NEM_Intf} ipv4 address ${Intf.invalid_ip6} netmask ${Intf.netmask1} preferred true"/>
        <command verify="v3,v8,v17"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${Interface.NEM_Intf} ipv4 address ${Intf.invalid_ip6}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${Interface.NEM_Intf} ipv4 address ${Intf.invalid_ip7} netmask ${Intf.netmask1} preferred true"/>
        <command verify="v3,v8,v17"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${Interface.NEM_Intf} ipv4 address ${Intf.invalid_ip7}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${Interface.NEM_Intf} ipv4 address ${Intf.invalid_ip8} netmask ${Intf.netmask1} preferred true"/>
        <command verify="v3,v8,v17"     send="commit"/>
        <command verify="v1,v2"     send="delete interfaces interface ${Interface.NEM_Intf} ipv4 address ${Intf.invalid_ip8}"/>
        <command verify="v1,v2,v9"     send="commit"/>
        <command verify="v8,v10,v17"     send="set interfaces interface ${Interface.NEM_Intf} ipv4 address ${Intf.invalid_ip9} netmask ${Intf.netmask1}"/>
        <command verify="v8,v11,v17"     send="set interfaces interface ${Interface.NEM_Intf} ipv4 address ${Intf.invalid_ip10} netmask ${Intf.netmask1}"/>
        <command verify="v8,v12,v17"     send="set interfaces interface ${Interface.NEM_Intf} ipv4 address ${Intf.invalid_ip11} netmask ${Intf.netmask1}"/>
        <command verify="v8,v13,v17"     send="set interfaces interface ${Interface.NEM_Intf} ipv4 address ${Intf.invalid_ip12} netmask ${Intf.netmask1}"/>
        <command verify="v8,v14,v17"     send="set interfaces interface ${Interface.NEM_Intf} ipv4 address ${Intf.invalid_ip13} netmask ${Intf.netmask1}"/>
        <command verify="v8,v15,v17"     send="set interfaces interface ${Interface.NEM_Intf} ipv4 address ${Intf.invalid_ip14} netmask ${Intf.netmask1}"/>
        <command verify="v8,v16,v17"     send="set interfaces interface ${Interface.NEM_Intf} ipv4 address ${Intf.invalid_ip15} netmask ${Intf.netmask1}"/>
        <command verify="v1"     send="commit"/>
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="error"/>
        <v3 found="yes" search="Invalid ipv4 address"/>
        <v4 found="no" search="Error: application communication failure"/>
        <v5 found="no" search="Error: application error"/>
        <v6 found="no" search="Aborted: application communication failure"/>
        <v7 found="yes" search="Commit complete"/>
        <v8 found="yes" search="error"/>
        <v9 found="yes" search=".*ommit.*"/>
        <v10 found="yes" search="syntax error.*${Intf.invalid_ip9}.*"/>
        <v11 found="yes" search="syntax error.*${Intf.invalid_ip10}.*"/>
        <v12 found="yes" search="syntax error.*${Intf.invalid_ip11}.*"/>
        <v13 found="yes" search="syntax error.*${Intf.invalid_ip12}.*"/>
        <v14 found="yes" search="syntax error.*${Intf.invalid_ip13}.*"/>
        <v15 found="yes" search="syntax error.*${Intf.invalid_ip14}.*"/>
        <v16 found="yes" search="syntax error.*${Intf.invalid_ip15}.*"/>
        <v17 found="no" search="ok"/>
    </testdata>
    <testdata title="provision/edit_NEM_with_valid_ipv4address" execute="yes" row="1">
        <command verify="v1,v2"   send="set interfaces interface ${Interface.NEM_Intf} type ip ipv4"/>
        <command verify="v1,v2,v4,v3,v22,v777"   send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${Interface.NEM_Intf} ipv4 address ${Interface.validip_1} netmask ${Intf.netmask2}  preferred true"/>
        <command verify="v1,v2,v4,v3,v22,v77"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v6,v7"   send="show interfaces interface ${Interface.NEM_Intf}"/>
        <command verify="v1" end="${oper_prompt.value}" send="exit"/>
        <command verify="v1,v99" end="${oper_prompt.value}" send="show interfaces-state interface ${Interface.NEM_Intf} ipv4"/>
        <command verify="v1" end="${config_prompt.value}" send="config"/>
	<command verify="v1,v22"     send="delete interfaces interface ${Interface.NEM_Intf} ipv4 address ${Interface.validip_1}"/>
        <command verify="v1,v11,v3,v4"   send="edit interfaces interface ${Interface.NEM_Intf} ipv4 address ${Interface.validip_2} netmask ${Intf.netmask2}  preferred true"  />
        <command verify="v1,v2,v4,v3,v22,v77"   send="commit"/>
        <command verify="v1,v22,v4"   send="exit"/>
        <command verify="v1,v2,v3,v4,v5,v6,v8"   send="show interfaces interface ${Interface.NEM_Intf}"/>
        <command verify="v1,v22"     send="delete interfaces interface ${Interface.NEM_Intf} ipv4 address ${Interface.validip_2}"/>
        <command verify="v1,v2"     send="set interfaces interface ${Interface.NEM_Intf} ipv4 address ${Interface.validip_3} netmask ${Intf.netmask2}  preferred true"/>
        <command verify="v1,v2,v4,v3,v22,v77"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v6,v9"   send="show interfaces interface ${Interface.NEM_Intf}"/>
        <command verify="v1,v22"     send="delete interfaces interface ${Interface.NEM_Intf} ipv4 address ${Interface.validip_3}"/>
        <command verify="v1,v22"     send="delete interfaces interface ${Interface.NEM_Intf}"/>
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="Error: application communication failure"/>
        <v3 found="no" search="Error: application error"/>
        <v4 found="no" search="Aborted: application communication failure"/>
        <v5 found="yes" search="type.*${iptype.ip}"/>
        <v6 found="yes" search="forwarding.*${ip_forward.false}"/>
        <v7 found="yes" search="address.*${Interface.validip_1}"/>
        <v8 found="yes" search="address.*${Interface.validip_2}"/>
        <v9 found="yes" search="address.*${Interface.validip_3}"/>
        <v22 found="no" search="error"/>
        <v77 found="yes" search="Commit complete"/>
        <v11 found="yes" search="edit.*${Interface.NEM_Intf}"/>
        <v777 found="yes" search=".*ommit.*"/>
	<v99 found="yes" search="${Interface.validip_1}.*static.*${Interface.prefix-length_32}"/>
    </testdata>
    <testdata title="Default_value_verifications_NEM_IPInterface" execute="yes" row="1">
        <command verify="v1,v2"   send="set interfaces interface ${Interface.NEM_Intf} type ip ipv4"/>
        <command verify="v1,v2,v4,v3,v22,v77"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v6,v7,v111,v22,v222"   send="show interfaces interface ${Interface.NEM_Intf}"/>
        <command verify="v1,v22"     send="delete interfaces interface ${Interface.NEM_Intf} ipv4"/>
        <command verify="v1,v22"     send="delete interfaces interface ${Interface.NEM_Intf}"/>
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="Error: application communication failure"/>
        <v3 found="no" search="Error: application error"/>
        <v4 found="no" search="Aborted: application communication failure"/>
        <v5 found="yes" search="type.*${iptype.ip}"/>
        <v6 found="yes" search="forwarding.*${ip_forward.false}"/>
        <v7 found="yes" search="mtu.*${mtu.mtu2}"/>
        <v77 found="yes" search="Commit complete"/>
        <v111 found="yes" search="enabled"/>
        <v222 found="yes" search="ipv4"/>
        <v22 found="no" search="error"/>
    </testdata>
    <testdata title="provision_of_NEM_IPV4_same_as_LCN1/LCN2" execute="yes" row="1">
        <command verify="v1"   send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1"   send="delete interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} type ip ipv4 address ${Interface.validip_1} netmask ${Intf.netmask11}"/>
        <command verify="v1,v2,v4,v3,v22,v77"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v7,v22"   send="show interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v2"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} type ip ipv4 address ${Interface.validip_2} netmask ${Intf.netmask11}"/>
        <command verify="v1,v2,v4,v3,v22,v77"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v8,v22"   send="show interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2"   send="set interfaces interface ${Interface.NEM_Intf} type ip ipv4"/>
        <command verify="v1,v2,v4,v3,v22,v77"   send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${Interface.NEM_Intf} ipv4 address ${Interface.validip_1} netmask ${Intf.netmask2} preferred true"/>
        <command verify="v1,v2,v4,v3,v22,v77"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v7,v22"   send="show interfaces interface ${Interface.NEM_Intf}"/>
        <command verify="v1,v2,v3,v4,v5,v7,v22"   send="show interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v22"     send="delete interfaces interface ${Interface.NEM_Intf} ipv4 address ${Interface.validip_1}"/>
        <command verify="v1,v2"     send="set interfaces interface ${Interface.NEM_Intf} ipv4 address ${Interface.validip_2} netmask ${Intf.netmask2} preferred true"/>
        <command verify="v1,v2,v4,v3,v22,v77"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v8,v22"   send="show interfaces interface ${Interface.NEM_Intf}"/>
        <command verify="v1,v2,v3,v4,v5,v8,v22"   send="show interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v22"     send="delete interfaces interface ${Interface.NEM_Intf} ipv4 address ${Interface.validip_2}"/>
        <command verify="v1,v22"     send="delete interfaces interface ${Interface.NEM_Intf}"/>
        <command verify="v1,v2,v4,v3,v22,v77"   send="commit"/>
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="Error: application communication failure"/>
        <v3 found="no" search="Error: application error"/>
        <v4 found="no" search="Aborted: application communication failure"/>
        <v5 found="yes" search="type.*${iptype.ip}"/>
        <v7 found="yes" search="address.*${Interface.validip_1}"/>
        <v8 found="yes" search="address.*${Interface.validip_2}"/>
        <v22 found="no" search="error"/>
        <v77 found="yes" search="Commit complete"/>
    </testdata>
    <testdata title="Provision_static_route_with_nexthop_interface_LMP" execute="yes" row="1">
        <command verify="v1"   send="commit"/>
        <command verify="v1"   send="set routing routing-instance 1 interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance ${routing.instance} routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.route1} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2,v3,v4,v5"     send="show routing routing-instance 1"/>
        <command verify="v1,v2,v8"     send="commit"/>
        <command verify="v1,v2"     send="set routing routing-instance ${routing.instance} routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.route2} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2,v3,v6,v7"     send="show routing routing-instance 1 | nom"/>
        <command verify="v1,v2,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.route1}"/>
        <command verify="v1,v2,v8"     send="commit"/>
        <command verify="v1,v2,v9"     send="show routing routing-instance 1  | nom"/>
        <command verify="v1,v2"     send="delete routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.route2}"/>
        <command verify="v1,v2,v8"     send="commit"/>
        <command verify="v1,v2,v10"     send="show routing routing-instance 1  | nom"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 interfaces interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance ${routing.instance} routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.route1} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance ${routing.instance} routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.route2} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2,v3,v4,v5,v6,v7"     send="show routing routing-instance 1  | nom"/>
        <command verify="v1,v2,v8"     send="commit"/>
        <command verify="v1,v2"     send="delete routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes"/>
        <command verify="v1,v2,v8"     send="commit"/>
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="error"/>
        <v3 found="yes" search="type.*default-routing-instance"/>
        <v4 found="yes" search="route.*${routing.route1}"/>
        <v6 found="yes" search="route.*${routing.route2}"/>
        <v5 found="yes" search="outgoing-interface.*${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <v7 found="yes" search="outgoing-interface.*${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <v8 found="yes" search="Commit complete"/>
        <v9 found="no" search="route.*${routing.route1}"/>
        <v10 found="no" search="route.*${routing.route2}"/>
    </testdata>
    <testdata title="delete_ip_management_interfaces" execute="yes" row="1">
        <command verify="v1"   send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1"   send="delete interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2"   send="commit"/>
        <v1 found="yes" search="ok"/>
    </testdata>
    <testdata title="delete_routing" execute="yes" row="1">
        <command verify="v1,v2"     send="delete routing"/>
        <command verify="v1,v2"     send="commit"/>
        <command verify="v1,v2,v71"     send="show routing"/>
        <v71 found="yes" search="No entries found."/>
    </testdata>
    <testdata title="delete_ip_management_interfaces" execute="yes" row="2">
        <command verify="v1,v2"   send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v2"   send="delete interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2"   send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_name}"/>
        <command verify="v1,v2"   send="delete interfaces interface ${network1.ne1.shelf1.LCN2.int_name}"/>
        <command verify="v1,v2"   send="commit"/>
        <command verify="v1,v2,v10"   send="show int int"/>
        <command verify="v1,v2"   send="delete eqpt shelf 1 slot 0 subslot 0 port LCN1"/>
        <command verify="v1,v2"   send="delete eqpt shelf 1 slot 0 subslot 0 port LCN2"/>
        <command verify="v1,v2"   send="commit"/>
        <command verify="v1,v2,v11"   send="show eqpt"/>
        <v10 found="no" search="(?s).*${network1.ne1.shelf1.LCN1.int_ip_name}.*|.*${network1.ne1.shelf1.LCN2.int_ip_name}.*|.*${network1.ne1.shelf1.LCN1.int_name}.*|.*${network1.ne1.shelf1.LCN2.int_name}.*"/>
        <v11 found="no" search=".*LCN1.*|.*LCN2.*"/>
    </testdata>
    <testdata title="provisioning_beyond_Maximum_static_route" execute="yes" row="1">
        <command verify="v1,v2,v3"   send="commit"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute1} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute2} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute3} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute4} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute5} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute6} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute7} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute8} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute9} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute10} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute11} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute12} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute13} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute14} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute15} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute16} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute17} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute18} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute19} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute20} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute21} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute22} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute23} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute24} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute25} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute26} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute27} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute28} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute29} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute30} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute31} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute32} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2,v38"     send="commit"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route1} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route2} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route3} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route4} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route5} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route6} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route7} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route8} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route9} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route10} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route11} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route12} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route13} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route14} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route15} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route16} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route17} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route18} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route19} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route20} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route21} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route22} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route23} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route24} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route25} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route26} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route27} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route28} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route29} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route30} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route31} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route32} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v1,v2,v38"     send="commit"/>
        <command verify="v1,v2,v3,v4,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute1}"/>
        <command verify="v1,v2,v3,v6,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute2}"/>
        <command verify="v1,v2,v3,v7,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute3}"/>
        <command verify="v1,v2,v3,v8,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute4}"/>
        <command verify="v1,v2,v3,v9,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute5}"/>
        <command verify="v1,v2,v3,v10,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute6}"/>
        <command verify="v1,v2,v3,v111,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute7}"/>
        <command verify="v1,v2,v3,v12,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute8}"/>
        <command verify="v1,v2,v3,v13,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute9}"/>
        <command verify="v1,v2,v3,v14,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute10}"/>
        <command verify="v1,v2,v3,v15,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute11}"/>
        <command verify="v1,v2,v3,v16,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute12}"/>
        <command verify="v1,v2,v3,v17,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute13}"/>
        <command verify="v1,v2,v3,v18,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute14}"/>
        <command verify="v1,v2,v3,v19,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute15}"/>
        <command verify="v1,v2,v3,v20,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute16}"/>
        <command verify="v1,v2,v3,v21,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute17}"/>
        <command verify="v1,v2,v3,v22,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute18}"/>
        <command verify="v1,v2,v3,v23,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute19}"/>
        <command verify="v1,v2,v3,v24,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute20}"/>
        <command verify="v1,v2,v3,v25,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute21}"/>
        <command verify="v1,v2,v3,v26,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute22}"/>
        <command verify="v1,v2,v3,v27,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute23}"/>
        <command verify="v1,v2,v3,v28,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute24}"/>
        <command verify="v1,v2,v3,v29,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute25}"/>
        <command verify="v1,v2,v3,v30,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute26}"/>
        <command verify="v1,v2,v3,v31,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute27}"/>
        <command verify="v1,v2,v3,v32,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute28}"/>
        <command verify="v1,v2,v3,v343,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute29}"/>
        <command verify="v1,v2,v3,v34,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute30}"/>
        <command verify="v1,v2,v3,v35,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute31}"/>
        <command verify="v1,v2,v3,v36,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute32}"/>
        <command verify="v1,v2,v38"     send="commit"/>
        <command verify="v1,v2,v3,v39,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route1}"/>
        <command verify="v1,v2,v3,v40,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route2}"/>
        <command verify="v1,v2,v3,v41,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route3}"/>
        <command verify="v1,v2,v3,v42,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route4}"/>
        <command verify="v1,v2,v3,v43,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route5}"/>
        <command verify="v1,v2,v3,v44,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route6}"/>
        <command verify="v1,v2,v3,v45,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route7}"/>
        <command verify="v1,v2,v3,v46,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route8}"/>
        <command verify="v1,v2,v3,v47,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route9}"/>
        <command verify="v1,v2,v3,v48,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route10}"/>
        <command verify="v1,v2,v3,v49,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route11}"/>
        <command verify="v1,v2,v3,v50,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route12}"/>
        <command verify="v1,v2,v3,v51,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route13}"/>
        <command verify="v1,v2,v3,v52,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route14}"/>
        <command verify="v1,v2,v3,v53,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route15}"/>
        <command verify="v1,v2,v3,v54,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route16}"/>
        <command verify="v1,v2,v3,v55,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route17}"/>
        <command verify="v1,v2,v3,v56,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route18}"/>
        <command verify="v1,v2,v3,v57,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route19}"/>
        <command verify="v1,v2,v3,v58,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route20}"/>
        <command verify="v1,v2,v3,v59,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route21}"/>
        <command verify="v1,v2,v3,v60,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route22}"/>
        <command verify="v1,v2,v3,v61,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route23}"/>
        <command verify="v1,v2,v3,v62,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route24}"/>
        <command verify="v1,v2,v3,v63,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route25}"/>
        <command verify="v1,v2,v3,v64,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route26}"/>
        <command verify="v1,v2,v3,v65,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route27}"/>
        <command verify="v1,v2,v3,v66,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route28}"/>
        <command verify="v1,v2,v3,v67,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route29}"/>
        <command verify="v1,v2,v3,v68,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route30}"/>
        <command verify="v1,v2,v3,v69,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route31}"/>
        <command verify="v1,v2,v3,v70,v5"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route32}"/>
        <command verify="v1,v2"     send="commit"/>
        <command verify="v1,v2,v3"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route33} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v11,v222,v33,v3333"     send="commit"/>
        <command verify="v1,v2,v3"     send="delete routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route ${routing.ipv6route33}"/>
        <command verify="v1,v2"     send="commit"/>
        <command verify="v1,v2,v3"     send="set routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute33} next-hop outgoing-interface ${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <command verify="v11,v222,v33,v333"     send="commit"/>
        <command verify="v1,v2,v3"     send="delete routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route ${routing.rroute33}"/>
        <command verify="v1,v2"     send="commit"/>
        <command verify="v1,v71"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv6 route ${routing.ipv6route33}"/>
        <command verify="v1,v71"     send="show routing routing-instance 1 routing-protocols routing-protocol  static-routes ipv4 route ${routing.rroute33}"/>
        <command verify="v1,v2"     send="delete routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes"/>
        <command verify="v1,v2,v71"     send="show routing routing-instance 1 routing-protocols routing-protocol static static-routes"/>
        <command verify="v1,v2"     send="commit"/>
        <command verify="v1,v2"     send="show routing"/>
        <v1 found="yes" search="ok"/>
        <v11 found="no" search="ok"/>
        <v2 found="no" search="error"/>
        <v222 found="yes" search="error"/>
        <v3 found="no" search="Aborted"/>
        <v33 found="yes" search="Aborted"/>
        <v333 found="yes" search="too many.*'routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv4 route', 33 configured, at most 32 must be configured"/>
        <v3333 found="yes" search="Aborted: too many 'routing routing-instance 1 routing-protocols routing-protocol static FNC static-routes ipv6 route', 33 configured, at most 32 must be configured"/>
        <v4 found="yes" search="route.*${routing.rroute1}"/>
        <v5 found="yes" search="outgoing-interface.*${network1.ne1.shelf1.LMP.int_ip_name}"/>
        <v6 found="yes" search="route.*${routing.rroute2}"/>
        <v7 found="yes" search="route.*${routing.rroute3}"/>
        <v8 found="yes" search="route.*${routing.rroute4}"/>
        <v9 found="yes" search="route.*${routing.rroute5}"/>
        <v10 found="yes" search="route.*${routing.rroute6}"/>
        <v111 found="yes" search="route.*${routing.rroute7}"/>
        <v12 found="yes" search="route.*${routing.rroute8}"/>
        <v13 found="yes" search="route.*${routing.rroute9}"/>
        <v14 found="yes" search="route.*${routing.rroute10}"/>
        <v15 found="yes" search="route.*${routing.rroute11}"/>
        <v16 found="yes" search="route.*${routing.rroute12}"/>
        <v17 found="yes" search="route.*${routing.rroute13}"/>
        <v18 found="yes" search="route.*${routing.rroute14}"/>
        <v19 found="yes" search="route.*${routing.rroute15}"/>
        <v20 found="yes" search="route.*${routing.rroute16}"/>
        <v21 found="yes" search="route.*${routing.rroute17}"/>
        <v22 found="yes" search="route.*${routing.rroute18}"/>
        <v23 found="yes" search="route.*${routing.rroute19}"/>
        <v24 found="yes" search="route.*${routing.rroute20}"/>
        <v25 found="yes" search="route.*${routing.rroute21}"/>
        <v26 found="yes" search="route.*${routing.rroute22}"/>
        <v27 found="yes" search="route.*${routing.rroute23}"/>
        <v28 found="yes" search="route.*${routing.rroute24}"/>
        <v29 found="yes" search="route.*${routing.rroute25}"/>
        <v30 found="yes" search="route.*${routing.rroute26}"/>
        <v31 found="yes" search="route.*${routing.rroute27}"/>
        <v32 found="yes" search="route.*${routing.rroute28}"/>
        <v343 found="yes" search="route.*${routing.rroute29}"/>
        <v34 found="yes" search="route.*${routing.rroute30}"/>
        <v35 found="yes" search="route.*${routing.rroute31}"/>
        <v36 found="yes" search="route.*${routing.rroute32}"/>
        <v38 found="yes" search=".*ommit.*"/>
        <v39 found="yes" search="route.*${routing.ipv6route1}"/>
        <v40 found="yes" search="route.*${routing.ipv6route2}"/>
        <v41 found="yes" search="route.*${routing.ipv6route3}"/>
        <v42 found="yes" search="route.*${routing.ipv6route4}"/>
        <v43 found="yes" search="route.*${routing.ipv6route5}"/>
        <v44 found="yes" search="route.*${routing.ipv6route6}"/>
        <v45 found="yes" search="route.*${routing.ipv6route7}"/>
        <v46 found="yes" search="route.*${routing.ipv6route8}"/>
        <v47 found="yes" search="route.*${routing.ipv6route9}"/>
        <v48 found="yes" search="route.*${routing.ipv6route10}"/>
        <v49 found="yes" search="route.*${routing.ipv6route11}"/>
        <v50 found="yes" search="route.*${routing.ipv6route12}"/>
        <v51 found="yes" search="route.*${routing.ipv6route13}"/>
        <v52 found="yes" search="route.*${routing.ipv6route14}"/>
        <v53 found="yes" search="route.*${routing.ipv6route15}"/>
        <v54 found="yes" search="route.*${routing.ipv6route16}"/>
        <v55 found="yes" search="route.*${routing.ipv6route17}"/>
        <v56 found="yes" search="route.*${routing.ipv6route18}"/>
        <v57 found="yes" search="route.*${routing.ipv6route19}"/>
        <v58 found="yes" search="route.*${routing.ipv6route20}"/>
        <v59 found="yes" search="route.*${routing.ipv6route21}"/>
        <v60 found="yes" search="route.*${routing.ipv6route22}"/>
        <v61 found="yes" search="route.*${routing.ipv6route23}"/>
        <v62 found="yes" search="route.*${routing.ipv6route24}"/>
        <v63 found="yes" search="route.*${routing.ipv6route25}"/>
        <v64 found="yes" search="route.*${routing.ipv6route26}"/>
        <v65 found="yes" search="route.*${routing.ipv6route27}"/>
        <v66 found="yes" search="route.*${routing.ipv6route28}"/>
        <v67 found="yes" search="route.*${routing.ipv6route29}"/>
        <v68 found="yes" search="route.*${routing.ipv6route30}"/>
        <v69 found="yes" search="route.*${routing.ipv6route31}"/>
        <v70 found="yes" search="route.*${routing.ipv6route32}"/>
        <v71 found="yes" search="No entries found."/>
    </testdata>
    <testdata title="provision_ospfv2_interface" execute="yes" row="1">
	<command verify="v1,v2,v3,v4,v5"   send="set eqpt shelf 1 slot 0 subslot 0 port LCN1 pluggableInterfaceType 1GEX admin-status up"/>
        <command verify="v1,v2,v3,v4,v5"   send="set eqpt shelf 1 slot 0 subslot 0 port LCN2 pluggableInterfaceType 1GEX admin-status up"/>
        <command verify="v1,v2,v3,v4,v5"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} type ethernetCsmacd" />
        <command verify="v1,v2,v3,v4,v5"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} type ethernetCsmacd" />
        <command verify="v1,v2,v3,v4,v5"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} type ip" />
        <command verify="v1,v2,v3,v4,v5"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} type ip" />
        <command verify="v1,v2,v3,v4,v5"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 enabled"/>
        <command verify="v1,v2,v3,v4,v5"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 enabled"/>
        <command verify="v1,v2,v3,v4,v5"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 forwarding true address ${ospf.ospf_ip1} netmask ${ospf.netmask}"/>
        <command verify="v1,v2,v3,v4,v5"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 forwarding true address ${ospf.ospf_ip2} netmask ${ospf.netmask}"/>
        <command verify="v1,v2,v3,v4,v5,v77"   send="commit"/>
        <command verify="v1,v2,v6"     send="show interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v2,v7"     send="show interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2,v5"     send="set routing routing-instance 1 routing-protocols routing-protocol ospfv2 OSPF"/>
        <command verify="v1,v2,v3,v4,v5,v77"   send="commit"/>
        <command verify="v1,v2,v8"     send="show routing routing-instance 1 routing-protocols  | nom"/>
        <command verify="v1,v2,v3,v4,v5"     send="set routing routing-instance 1 routing-protocols routing-protocol ospfv2 OSPF ospf instance 1 ipv4 router-id ${ospf.routerid}"/>
        <command verify="v1,v2,v3,v4,v5,v77"   send="commit"/>
        <command verify="v1,v5,v10,v9,v99,v999"     send="show routing routing-instance 1 routing-protocols  | nom"/>
        <command verify="v1,v2,v3,v4,v5"     send="set routing routing-instance 1 routing-protocols routing-protocol ospfv2 OSPF ospf instance 1 ipv4 router-id ${ospf.routerid} area ${ospf.area1} interface ${network1.ne1.shelf1.LCN1.int_ip_name} hello-interval ${ospf.helloint}"/>
        <command verify="v1,v2,v3,v4,v5,v77"   send="commit"/>
        <command verify="v1,v5,v11,v12,v13"     send="show routing routing-instance routing-protocols routing-protocol ospf instance 1 area ${ospf.area1}"/>
        <command verify="v1,v2,v3,v4,v5"     send="set routing routing-instance 1 routing-protocols routing-protocol ospfv2 OSPF ospf instance 1 ipv4 router-id ${ospf.routerid} area ${ospf.area2} interface ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2,v3,v4,v5,v77"   send="commit"/>
        <command verify="v1,v5,v14,v15,v16"     send="show routing routing-instance routing-protocols routing-protocol ospf instance 1 area ${ospf.area2}"/>
        <command verify="v1,v2,v3,v4,v5"     send="set routing routing-instance 1 routing-protocols routing-protocol ospfv2 OSPF ospf instance 1 ipv4 network ${ospf.network1} ${ospf.netmask} area ${ospf.area1}"/>
        <command verify="v1,v2,v3,v4,v5,v77"   send="commit"/>
        <command verify="v1,v5,v17,v18"     send="show routing routing-instance 1 routing-protocols routing-protocol ospf instance 1 network ${ospf.network1}"/>
        <command verify="v1,v2,v3,v4,v5"     send="set routing routing-instance 1 routing-protocols routing-protocol ospfv2 OSPF ospf instance 1 ipv4 network ${ospf.network2} ${ospf.netmask} area ${ospf.area2}"/>
        <command verify="v1,v2,v3,v4,v5,v77"   send="commit"/>
        <command verify="v1,v5,v19,v20"     send="show routing routing-instance 1 routing-protocols routing-protocol ospf instance 1 network ${ospf.network2}"/>
        <command verify="v1,v5"     send="show routing  | nom"/>
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="Error: application communication failure"/>
        <v3 found="no" search="Error: application error"/>
        <v4 found="no" search="Aborted: application communication failure"/>
        <v5 found="no" search="error"/>
        <v6 found="yes" search="address.*${ospf.ospf_ip1}"/>
        <v7 found="yes" search="address.*${ospf.ospf_ip2}"/>
        <v8 found="yes" search="routing-protocol ospfv2.*OSPF.*"/>
        <v9 found="yes" search="operation-mode.*ships-in-the-night"/>
        <v99 found="yes" search="instance 1.*ipv4"/>
        <v999 found="yes" search="restart-interval.*120"/>
        <v10 found="yes" search="router-id.*${ospf.routerid}"/>
        <v11 found="yes" search="area.*${ospf.area1}"/>
        <v12 found="yes" search="interface.*${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <v13 found="yes" search="hello-interval.*${ospf.helloint}"/>
        <v14 found="yes" search="area.*${ospf.area2}"/>
        <v15 found="yes" search="interface.*${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <v16 found="no" search="hello-interval"/>
        <v17 found="yes" search="network ${ospf.network1}.*${ospf.netmask}"/>
        <v18 found="yes" search="area.*${ospf.area1}"/>
        <v19 found="yes" search="network ${ospf.network2}.*${ospf.netmask}"/>
        <v20 found="yes" search="area.*${ospf.area2}"/>
        <v77 found="yes" search="Commit complete"/>
        <v22 found="yes" search="No modifications to commit."/>
        <v9999 found="yes" search=".*ommit.*"/>
        <v21 found="yes" search="(?s)Aborted.*too many.*routing.*routing-protocol.*3 configured.*most 2 must be configured"/>
    </testdata>
    <testdata title="provision_ospfv2_interface" execute="yes" row="2">        
	<command verify="v1,v2,v3,v4,v5"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} type ethernetCsmacd" />
        <command verify="v1,v2,v3,v4,v5"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} type ethernetCsmacd" />
        <command verify="v1,v2,v3,v4,v5"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} type ip" />
        <command verify="v1,v2,v3,v4,v5"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} type ip" />
        <command verify="v1,v2,v3,v4,v5"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 enabled"/>
        <command verify="v1,v2,v3,v4,v5"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 enabled"/>
        <command verify="v1,v2,v3,v4,v5"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 forwarding true address ${ospf.ospf_ip1} netmask ${ospf.netmask}"/>
        <command verify="v1,v2,v3,v4,v5"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 forwarding true address ${ospf.ospf_ip2} netmask ${ospf.netmask}"/>
        <command verify="v1,v2,v3,v4,v5,v77"   send="commit"/>
        <command verify="v1,v2,v6"     send="show interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1,v2,v7"     send="show interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2,v5"     send="set routing routing-instance 1 routing-protocols routing-protocol ospfv2 OSPF"/>
        <command verify="v1,v2,v3,v4,v5,v77"   send="commit"/>
        <command verify="v1,v2,v8"     send="show routing routing-instance 1 routing-protocols  | nom"/>
        <command verify="v1,v2,v3,v4,v5"     send="set routing routing-instance 1 routing-protocols routing-protocol ospfv2 OSPF ospf instance 1 ipv4 router-id ${ospf.routerid}"/>
        <command verify="v1,v2,v3,v4,v5,v77"   send="commit"/>
        <command verify="v1,v5,v10,v9,v99,v999"     send="show routing routing-instance 1 routing-protocols  | nom"/>
        <command verify="v1,v2,v3,v4,v5"     send="set routing routing-instance 1 routing-protocols routing-protocol ospfv2 OSPF ospf instance 1 ipv4 router-id ${ospf.routerid} area ${ospf.area1} interface ${network1.ne1.shelf1.LCN1.int_ip_name} hello-interval ${ospf.helloint}"/>
        <command verify="v1,v2,v3,v4,v5,v77"   send="commit"/>
        <command verify="v1,v5,v11,v12,v13"     send="show routing routing-instance routing-protocols routing-protocol ospf instance 1 area ${ospf.area1}"/>
        <command verify="v1,v2,v3,v4,v5"     send="set routing routing-instance 1 routing-protocols routing-protocol ospfv2 OSPF ospf instance 1 ipv4 router-id ${ospf.routerid} area ${ospf.area2} interface ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2,v3,v4,v5,v77"   send="commit"/>
        <command verify="v1,v5,v14,v15,v16"     send="show routing routing-instance routing-protocols routing-protocol ospf instance 1 area ${ospf.area2}"/>
        <command verify="v1,v2,v3,v4,v5"     send="set routing routing-instance 1 routing-protocols routing-protocol ospfv2 OSPF ospf instance 1 ipv4 network ${ospf.network1} ${ospf.netmask} area ${ospf.area1}"/>
        <command verify="v1,v2,v3,v4,v5,v77"   send="commit"/>
        <command verify="v1,v5,v17,v18"     send="show routing routing-instance 1 routing-protocols routing-protocol ospf instance 1 network ${ospf.network1}"/>
        <command verify="v1,v2,v3,v4,v5"     send="set routing routing-instance 1 routing-protocols routing-protocol ospfv2 OSPF ospf instance 1 ipv4 network ${ospf.network2} ${ospf.netmask} area ${ospf.area2}"/>
        <command verify="v1,v2,v3,v4,v5,v77"   send="commit"/>
        <command verify="v1,v5,v19,v20"     send="show routing routing-instance 1 routing-protocols routing-protocol ospf instance 1 network ${ospf.network2}"/>
        <command verify="v1,v5"     send="show routing  | nom"/>
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="Error: application communication failure"/>
        <v3 found="no" search="Error: application error"/>
        <v4 found="no" search="Aborted: application communication failure"/>
        <v5 found="no" search="error"/>
        <v6 found="yes" search="address.*${ospf.ospf_ip1}"/>
        <v7 found="yes" search="address.*${ospf.ospf_ip2}"/>
        <v8 found="yes" search="routing-protocol ospfv2.*OSPF.*"/>
        <v9 found="yes" search="operation-mode.*ships-in-the-night"/>
        <v99 found="yes" search="instance 1.*ipv4"/>
        <v999 found="yes" search="restart-interval.*120"/>
        <v10 found="yes" search="router-id.*${ospf.routerid}"/>
        <v11 found="yes" search="area.*${ospf.area1}"/>
        <v12 found="yes" search="interface.*${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <v13 found="yes" search="hello-interval.*${ospf.helloint}"/>
        <v14 found="yes" search="area.*${ospf.area2}"/>
        <v15 found="yes" search="interface.*${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <v16 found="no" search="hello-interval"/>
        <v17 found="yes" search="network ${ospf.network1}.*${ospf.netmask}"/>
        <v18 found="yes" search="area.*${ospf.area1}"/>
        <v19 found="yes" search="network ${ospf.network2}.*${ospf.netmask}"/>
        <v20 found="yes" search="area.*${ospf.area2}"/>
        <v77 found="yes" search="Commit complete"/>
        <v22 found="yes" search="No modifications to commit."/>
        <v9999 found="yes" search=".*ommit.*"/>
        <v21 found="yes" search="(?s)Aborted.*too many.*routing.*routing-protocol.*3 configured.*most 2 must be configured"/>
    </testdata>
    <testdata title="de-provision_ospfv2_interface" execute="yes" row="1">
        <command verify="v1,v5"   send="commit"/>
        <command verify="v1,v5"   send="delete routing routing-instance 1 routing-protocols routing-protocol ospfv2 OSPF"/>
        <command verify="v1"   send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1"   send="delete interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name}"/>
        <command verify="v1,v2,v5"   send="show routing routing-instance routing-protocols routing-protocol  | nom"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="No entries found"/>
        <v5 found="no" search="error"/>
    </testdata>
    <testdata title="provision/edit_NEM_with_valid_ipv4address" execute="yes" row="1">
        <command verify="v1,v2"   send="set interfaces interface ${Interface.NEM_Intf} type ip ipv4"/>
        <command verify="v1,v2,v4,v3,v22,v777"   send="commit"/>
        <command verify="v1,v2"     send="set interfaces interface ${Interface.NEM_Intf} ipv4 address ${Interface.validip_1} netmask ${Intf.netmask2}  preferred true"/>
        <command verify="v1,v2,v4,v3,v22,v77"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v6,v7"   send="show interfaces interface ${Interface.NEM_Intf}"/>
        <command verify="v1,v22"     send="delete interfaces interface ${Interface.NEM_Intf} ipv4 address ${Interface.validip_1}"/>
        <command verify="v1,v11,v3,v4"   send="edit interfaces interface ${Interface.NEM_Intf} ipv4 address ${Interface.validip_2} netmask ${Intf.netmask2} preferred true"  />
        <command verify="v1,v2,v4,v3,v22,v77"   send="commit"/>
        <command verify="v1,v22,v4"   send="exit"/>
        <command verify="v1,v2,v3,v4,v5,v6,v8"   send="show interfaces interface ${Interface.NEM_Intf}"/>
        <command verify="v1,v22"     send="delete interfaces interface ${Interface.NEM_Intf} ipv4 address ${Interface.validip_2}"/>
        <command verify="v1,v2"     send="set interfaces interface ${Interface.NEM_Intf} ipv4 address ${Interface.validip_3} netmask ${Intf.netmask2} preferred true"/>
        <command verify="v1,v2,v4,v3,v22,v77"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v6,v9"   send="show interfaces interface ${Interface.NEM_Intf}"/>
        <command verify="v1,v22"     send="delete interfaces interface ${Interface.NEM_Intf} ipv4 address ${Interface.validip_3}"/>
        <command verify="v1,v22"     send="delete interfaces interface ${Interface.NEM_Intf}"/>
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="Error: application communication failure"/>
        <v3 found="no" search="Error: application error"/>
        <v4 found="no" search="Aborted: application communication failure"/>
        <v5 found="yes" search="type.*${iptype.ip}"/>
        <v6 found="yes" search="forwarding.*${ip_forward.false}"/>
        <v7 found="yes" search="address.*${Interface.validip_1}"/>
        <v8 found="yes" search="address.*${Interface.validip_2}"/>
        <v9 found="yes" search="address.*${Interface.validip_3}"/>
        <v22 found="no" search="error"/>
        <v77 found="yes" search="Commit complete"/>
        <v11 found="yes" search="edit.*${Interface.NEM_Intf}"/>
        <v777 found="yes" search=".*ommit.*"/>
    </testdata>
    <testdata title="configure_management_eth_interfaces_invalid_params" execute="yes" row="1">
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet admin-status down speed ${speed.lower_range} duplex ${duplex.full} auto-negotiation ${auto_neg.enable}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet admin-status down speed ${speed.lower_range} duplex ${duplex.full} auto-negotiation ${auto_neg.enable}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet admin-status down speed ${speed.lower_range} duplex ${duplex.full} auto-negotiation ${auto_neg.enable}"/>
        <command verify="v2,v3"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet admin-status down speed ${speed.lower_range} duplex ${inv.duplex1} auto-negotiation ${auto_neg.enable}"/>
        <command verify="v2,v3"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet admin-status down speed ${speed.lower_range} duplex ${inv.duplex1} auto-negotiation ${auto_neg.enable}"/>
        <command verify="v2,v3"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet admin-status down speed ${speed.lower_range} duplex ${inv.duplex1} auto-negotiation ${auto_neg.enable}"/>
        <command verify="v2,v3"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet admin-status down speed ${speed.lower_range} duplex ${duplex.full} auto-negotiation ${inv.auto_neg1}"/>
        <command verify="v2,v3"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet admin-status down speed ${speed.lower_range} duplex ${duplex.full} auto-negotiation ${inv.auto_neg1}"/>
        <command verify="v2,v3"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet admin-status down speed ${speed.lower_range} duplex ${duplex.full} auto-negotiation ${inv.auto_neg1}"/>
	<command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet duplex ${inv.duplex1}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet duplex ${inv.duplex1}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet duplex ${inv.duplex1}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet duplex ${inv.duplex2}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet duplex ${inv.duplex2}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet duplex ${inv.duplex2}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet duplex ${inv.duplex3}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet duplex ${inv.duplex3}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet duplex ${inv.duplex3}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet duplex ${inv.duplex4}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet duplex ${inv.duplex4}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet duplex ${inv.duplex4}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet duplex ${inv.duplex5}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet duplex ${inv.duplex5}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet duplex ${inv.duplex5}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet duplex ${inv.duplex6}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet duplex ${inv.duplex6}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet duplex ${inv.duplex6}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet duplex ${duplex.half}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet duplex ${duplex.half}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet duplex ${duplex.half}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet duplex ${inv.duplex1}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet duplex ${inv.duplex1}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet duplex ${inv.duplex1}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet duplex ${inv.duplex2}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet duplex ${inv.duplex2}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet duplex ${inv.duplex2}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet duplex ${inv.duplex3}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet duplex ${inv.duplex3}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet duplex ${inv.duplex3}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet duplex ${inv.duplex4}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet duplex ${inv.duplex4}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet duplex ${inv.duplex4}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet duplex ${inv.duplex5}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet duplex ${inv.duplex5}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet duplex ${inv.duplex5}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet duplex ${inv.duplex6}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet duplex ${inv.duplex6}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet duplex ${inv.duplex6}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet auto-negotiation ${inv.auto_neg1}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet auto-negotiation ${inv.auto_neg1}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet auto-negotiation ${inv.auto_neg1}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet auto-negotiation ${inv.auto_neg2}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet auto-negotiation ${inv.auto_neg2}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet auto-negotiation ${inv.auto_neg2}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet auto-negotiation ${inv.auto_neg3}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet auto-negotiation ${inv.auto_neg3}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet auto-negotiation ${inv.auto_neg3}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet auto-negotiation ${inv.auto_neg4}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet auto-negotiation ${inv.auto_neg4}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet auto-negotiation ${inv.auto_neg4}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet auto-negotiation ${inv.auto_neg5}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet auto-negotiation ${inv.auto_neg5}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet auto-negotiation ${inv.auto_neg5}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet auto-negotiation ${inv.auto_neg6}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet auto-negotiation ${inv.auto_neg6}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet auto-negotiation ${inv.auto_neg6}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet auto-negotiation ${auto_neg.disable}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet auto-negotiation ${auto_neg.disable}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet auto-negotiation ${auto_neg.disable}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet auto-negotiation ${inv.auto_neg1}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet auto-negotiation ${inv.auto_neg1}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet auto-negotiation ${inv.auto_neg1}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet auto-negotiation ${inv.auto_neg2}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet auto-negotiation ${inv.auto_neg2}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet auto-negotiation ${inv.auto_neg2}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet auto-negotiation ${inv.auto_neg3}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet auto-negotiation ${inv.auto_neg3}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet auto-negotiation ${inv.auto_neg3}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet auto-negotiation ${inv.auto_neg4}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet auto-negotiation ${inv.auto_neg4}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet auto-negotiation ${inv.auto_neg4}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet auto-negotiation ${inv.auto_neg5}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet auto-negotiation ${inv.auto_neg5}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet auto-negotiation ${inv.auto_neg5}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet auto-negotiation ${inv.auto_neg6}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet auto-negotiation ${inv.auto_neg6}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet auto-negotiation ${inv.auto_neg6}"/> 
	<command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet auto-negotiation ${auto_neg.enable}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet auto-negotiation ${auto_neg.enable}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet auto-negotiation ${auto_neg.enable}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet speed ${inv.speed1}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet speed ${inv.speed1}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet speed ${inv.speed1}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet speed ${inv.speed2}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet speed ${inv.speed2}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet speed ${inv.speed2}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet speed ${inv.speed3}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet speed ${inv.speed3}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet speed ${inv.speed3}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet speed ${inv.speed4}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet speed ${inv.speed4}"/>
        <command verify="v2,v3,v4"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet speed ${inv.speed4}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet speed ${inv.speed5}"/>
        <command verify="v2,v4,v5"   send="commit"/>
        <command verify="v7,v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet speed ${speed.lower_range}"/>
        <command verify="v7,v1"   send="commit"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet speed ${inv.speed5}"/>
        <command verify="v2,v4,v6"   send="commit"/>
        <command verify="v7,v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet speed ${speed.lower_range}"/>
        <command verify="v7,v1"   send="commit"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet speed ${inv.speed5}"/>
        <command verify="v2,v4,v88"   send="commit"/>
        <command verify="v7,v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet speed ${speed.lower_range}"/>
        <command verify="v7,v1"   send="commit"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet speed ${inv.speed6}"/>
        <command verify="v2,v4,v5"   send="commit"/>
        <command verify="v7,v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet speed ${speed.lower_range}"/>
        <command verify="v7,v1"   send="commit"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet speed ${inv.speed6}"/>
        <command verify="v2,v4,v6"   send="commit"/>
        <command verify="v7,v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet speed ${speed.lower_range}"/>
        <command verify="v7,v1"   send="commit"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet speed ${inv.speed6}"/>
        <command verify="v2,v4,v88"   send="commit"/>
        <command verify="v7,v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet speed ${speed.lower_range}"/>
        <command verify="v7,v1"   send="commit"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet speed ${inv.speed7}"/>
        <command verify="v2,v4,v5"   send="commit"/>
        <command verify="v7,v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet speed ${speed.lower_range}"/>
        <command verify="v7,v1"   send="commit"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet speed ${inv.speed7}"/>
        <command verify="v2,v4,v6"   send="commit"/>
        <command verify="v7,v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet speed ${speed.lower_range}"/>
        <command verify="v7,v1"   send="commit"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet speed ${inv.speed7}"/>
        <command verify="v2,v4,v88"   send="commit"/>
        <command verify="v7,v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet speed ${speed.lower_range}"/>
        <command verify="v7,v1"   send="commit"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet speed ${inv.speed8}"/>
        <command verify="v2,v4,v5"   send="commit"/>
        <command verify="v7,v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet speed ${speed.lower_range}"/>
        <command verify="v7,v1"   send="commit"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet speed ${inv.speed8}"/>
        <command verify="v2,v4,v6"   send="commit"/>
        <command verify="v7,v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet speed ${speed.lower_range}"/>
        <command verify="v7,v1"   send="commit"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet speed ${inv.speed8}"/>
        <command verify="v2,v4,v88"   send="commit"/>
        <command verify="v7,v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet speed ${speed.lower_range}"/>
        <command verify="v7,v1"   send="commit"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet speed ${speed.lower_range}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet speed ${speed.lower_range}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet speed ${speed.lmp_lower_range}"/>
        <command verify="v7,v8,v1"   send="commit"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet speed ${inv.speed1}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet speed ${inv.speed1}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet speed ${inv.speed1}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet speed ${inv.speed2}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet speed ${inv.speed2}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet speed ${inv.speed2}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet speed ${inv.speed3}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet speed ${inv.speed3}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet speed ${inv.speed3}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet speed ${inv.speed4}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet speed ${inv.speed4}"/>
        <command verify="v2,v3,v4"   send="edit interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet speed ${inv.speed4}"/>
        <v8 found="yes" search="Commit complete"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="error"/>
        <v3 found="yes" search="syntax error: unknown element"/>
        <v4 found="no" search="ok"/>
        <v5 found="yes" search="Aborted: illegal reference 'interfaces interface ${network1.ne1.shelf1.LCN1.int_name} ethernet speed"/>
        <v6 found="yes" search="Aborted: illegal reference 'interfaces interface ${network1.ne1.shelf1.LCN2.int_name} ethernet speed"/>
        <v7 found="no" search="error"/>
        <v88 found="yes" search="Aborted: illegal reference 'interfaces interface ${network1.ne1.shelf1.LMP.int_name} ethernet speed"/>
    </testdata>
    <testdata title="prerequisites_multipleNEs" execute="yes" row="1">
        <command end=".*Password:.*" timeout="10"  send="sudo ip addr flush dev lcn00"/>
        <command end="${ping_prompt.value}" timeout="10"  send="1finity"/>
        <command end="${ping_prompt.value}" timeout="10"  send="sudo ip addr flush dev lcn00"/>
        <command end="${ping_prompt.value}"  send="sudo ip addr add ${Mqemu.ping_self1}/24 dev lcn00"/>
	<command end="${ping_prompt.value}"  send="sudo ip link set dev lcn00 up"/>
        <command end="${ping_prompt.value}"  send="sudo brctl setageing br-lcn00 0"/>
        <command end="${ping_prompt.value}"  send="sudo sysctl -w net.ipv6.conf.lcn00.accept_dad=0"/>
        <command end="${ping_prompt.value}"  send="sudo ip link set dev lcn00 down"/>
        <command end="${ping_prompt.value}"  send="sudo ip link set dev lcn00 up"/>
        <command end="${ping_prompt.value}"  send="sudo ip -6 addr add ${Mqemu.ping6_self1}/64 dev lcn00"/>
	<command end="${ping_prompt.value}"  send="sudo ip link set dev lcn00 up"/>
        <command end="${ping_prompt.value}"  send="sudo brctl setageing br-lcn00 0"/>
        <command end="${ping_prompt.value}"  send="sudo ifconfig lcn00"/>
        <command end="${ping_prompt.value}"  send="sudo ip addr flush dev lcn01"/>
        <command end="${ping_prompt.value}"  send="sudo ip addr add ${Mqemu.ping_self2}/24 dev lcn01"/>
	<command end="${ping_prompt.value}"  send="sudo ip link set dev lcn00 up"/>
        <command end="${ping_prompt.value}"  send="sudo brctl setageing br-lcn01 0"/>
        <command end="${ping_prompt.value}"  send="sudo sysctl -w net.ipv6.conf.lcn01.accept_dad=0"/>
        <command end="${ping_prompt.value}"  send="sudo ip link set dev lcn01 down"/>
        <command end="${ping_prompt.value}"  send="sudo ip link set dev lcn01 up"/>
        <command end="${ping_prompt.value}"  send="sudo ip -6 addr add ${Mqemu.ping6_self2}/64 dev lcn01"/>
	<command end="${ping_prompt.value}"  send="sudo ip link set dev lcn00 up"/>
        <command end="${ping_prompt.value}"  send="sudo brctl setageing br-lcn01 0"/>
        <command end="${ping_prompt.value}"  send="sudo ifconfig lcn01"/>
        <command end="${ping_prompt.value}"  send="sudo ip addr flush dev lcn02"/>
        <command end="${ping_prompt.value}"  send="sudo ip addr add ${Mqemu.ping_self3}/24 dev lcn02"/>
	<command end="${ping_prompt.value}"  send="sudo ip link set dev lcn00 up"/>
        <command end="${ping_prompt.value}"  send="sudo brctl setageing br-lcn02 0"/>
        <command end="${ping_prompt.value}"  send="sudo sysctl -w net.ipv6.conf.lcn02.accept_dad=0"/>
        <command end="${ping_prompt.value}"  send="sudo ip link set dev lcn02 down"/>
        <command end="${ping_prompt.value}"  send="sudo ip link set dev lcn02 up"/>
        <command end="${ping_prompt.value}"  send="sudo ip -6 addr add ${Mqemu.ping6_self3}/64 dev lcn02"/>
	<command end="${ping_prompt.value}"  send="sudo ip link set dev lcn00 up"/>
        <command end="${ping_prompt.value}"  send="sudo brctl setageing br-lcn02 0"/>
        <command end="${ping_prompt.value}"  send="sudo ifconfig lcn02"/>
    </testdata>
	<testdata title="cleanup_multipleNEs" execute="yes" row="1">
        <command end="${ping_prompt.value}" timeout="10"  send="sudo ip addr flush dev lcn00"/>
        <command end="${ping_prompt.value}"  send="sudo ip link set dev lcn00 down"/>
        <command end="${ping_prompt.value}"  send="sudo ip link set dev lcn00 up"/>
        <command end="${ping_prompt.value}"  send="sudo ifconfig lcn00"/>
        <command end="${ping_prompt.value}"  send="sudo ip addr flush dev lcn01"/>
        <command end="${ping_prompt.value}"  send="sudo ip link set dev lcn01 down"/>
        <command end="${ping_prompt.value}"  send="sudo ip link set dev lcn01 up"/>
        <command end="${ping_prompt.value}"  send="sudo ifconfig lcn01"/>
        <command end="${ping_prompt.value}"  send="sudo ip addr flush dev lcn02"/>
        <command end="${ping_prompt.value}"  send="sudo ip link set dev lcn02 down"/>
        <command end="${ping_prompt.value}"  send="sudo ip link set dev lcn02 up"/>
        <command end="${ping_prompt.value}"  send="sudo ifconfig lcn02"/>
    </testdata>
    <testdata title="ping_self_and_remote_qemu" execute="yes" row="1">
	<command verify="v1,v2" end="${oper_prompt.value}"  send="show sw-version"/>
        <command verify="v1,v2,v3,v4,v5,v6,v7" end="${oper_prompt.value}"  send="request iputil-ping options ${Mqemu.ping_self1} count ${Mqemu.count}"/>
        <command verify="v1,v2,v33,v4,v5,v6,v7" end="${oper_prompt.value}"  send="request iputil-ping options ${Mqemu.ping_remote1} count ${Mqemu.count}"/>
        <command verify="v1,v2,v41,v44,v5,v6,v7" end="${oper_prompt.value}"  send="request iputil-ping6 options ${Mqemu.ping6_self1}"/>
        <command verify="v1,v2,v42,v44,v5,v6,v7" end="${oper_prompt.value}"  send="request iputil-ping6 options ${Mqemu.ping6_remote1}"/>
        <command verify="v1,v2,v21,v4,v5,v6,v7" end="${oper_prompt.value}"  send="request iputil-ping options ${Mqemu.ping_self2} count ${Mqemu.count}"/>
        <command verify="v1,v2,v22,v4,v5,v6,v7" end="${oper_prompt.value}"  send="request iputil-ping options ${Mqemu.ping_remote2} count ${Mqemu.count}"/>
        <command verify="v1,v2,v51,v44,v5,v6,v7" end="${oper_prompt.value}"  send="request iputil-ping6 options ${Mqemu.ping6_self2}"/>
        <command verify="v1,v2,v52,v44,v5,v6,v7" end="${oper_prompt.value}"  send="request iputil-ping6 options ${Mqemu.ping6_remote2}"/>
        <command verify="v1,v2,v31,v4,v5,v6,v7" end="${oper_prompt.value}"  send="request iputil-ping options ${Mqemu.ping_self3} count ${Mqemu.count}"/>
        <command verify="v1,v2,v32,v4,v5,v6,v7" end="${oper_prompt.value}"  send="request iputil-ping options ${Mqemu.ping_remote3} count ${Mqemu.count}"/>
        <command verify="v1,v2,v61,v44,v5,v6,v7" end="${oper_prompt.value}"  send="request iputil-ping6 options ${Mqemu.ping6_self3}"/>
        <command verify="v1,v2,v62,v44,v5,v6,v7" end="${oper_prompt.value}"  send="request iputil-ping6 options ${Mqemu.ping6_remote3}"/>
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="error"/>
        <v3 found="yes" search="data 64 bytes from ${Mqemu.ping_self1}"/>
        <v33 found="yes" search="data 64 bytes from ${Mqemu.ping_remote1}"/>
        <v21 found="yes" search="data 64 bytes from ${Mqemu.ping_self2}"/>
        <v22 found="yes" search="data 64 bytes from ${Mqemu.ping_remote2}"/>
        <v31 found="yes" search="data 64 bytes from ${Mqemu.ping_self3}"/>
        <v32 found="yes" search="data 64 bytes from ${Mqemu.ping_remote3}"/>
        <v41 found="yes" search="data 64 bytes from ${Mqemu.ping6_self1}"/>
        <v42 found="yes" search="data 64 bytes from ${Mqemu.ping6_remote1}"/>
        <v51 found="yes" search="data 64 bytes from ${Mqemu.ping6_self2}"/>
        <v52 found="yes" search="data 64 bytes from ${Mqemu.ping6_remote2}"/>
        <v61 found="yes" search="data 64 bytes from ${Mqemu.ping6_self3}"/>
        <v62 found="yes" search="data 64 bytes from ${Mqemu.ping6_remote3}"/>
        <v4 found="yes" search="packet ${Mqemu.count} packets transmitted, ${Mqemu.count} received"/>
        <v44 found="yes" search="packet ${Mqemu.count6} packets transmitted, ${Mqemu.count6} received"/>
        <v5 found="yes" search="statistics"/>
        <v6 found="no" search="Unreachable"/>
        <v7 found="no" search="100% packet loss"/>
    </testdata>
    <testdata title="traceroute_self_and_remote_qemu" execute="yes" row="1">
        <command verify="v1,v2,v7,v3,v4" end="${oper_prompt.value}"   send="request iputil-traceroute options ${Mqemu.ping_self1}"/>
        <command verify="v1,v2,v7,v31,v41" end="${oper_prompt.value}"   send="request iputil-traceroute options ${Mqemu.ping_remote1}"/>
        <command verify="v1,v2,v7,v53,v54" end="${oper_prompt.value}"   send="request iputil-traceroute options ${Mqemu.ping_self2}"/>
        <command verify="v1,v2,v7,v531,v541" end="${oper_prompt.value}"   send="request iputil-traceroute options ${Mqemu.ping_remote2}"/>
        <command verify="v1,v2,v7,v63,v64" end="${oper_prompt.value}"   send="request iputil-traceroute options ${Mqemu.ping_self3}"/>
        <command verify="v1,v2,v7,v631,v641" end="${oper_prompt.value}"   send="request iputil-traceroute options ${Mqemu.ping_remote3}"/>
        <command verify="v1,v2,v7,v32,v42" end="${oper_prompt.value}"   send="request iputil-traceroute6 options ${Mqemu.ping6_self1}"/>
        <command verify="v1,v2,v7,v33,v43" end="${oper_prompt.value}"   send="request iputil-traceroute6 options ${Mqemu.ping6_remote1}"/>
        <command verify="v1,v2,v7,v532,v542" end="${oper_prompt.value}"   send="request iputil-traceroute6 options ${Mqemu.ping6_self2}"/>
        <command verify="v1,v2,v7,v533,v543" end="${oper_prompt.value}"   send="request iputil-traceroute6 options ${Mqemu.ping6_remote2}"/>
        <command verify="v1,v2,v7,v632,v642" end="${oper_prompt.value}"   send="request iputil-traceroute6 options ${Mqemu.ping6_self3}"/>
        <command verify="v1,v2,v7,v633,v643" end="${oper_prompt.value}"   send="request iputil-traceroute6 options ${Mqemu.ping6_remote3}"/>
        <v1 found="yes" search="ok"/>
        <v2 found="no" search="error"/>
        <v3 found="yes" search="trace  1  ${Mqemu.ping_self1}.*(${Mqemu.ping_self1})"/>
        <v31 found="yes" search="trace  1  ${Mqemu.ping_remote1}.*(${Mqemu.ping_remote1})"/>
        <v53 found="yes" search="trace  1  ${Mqemu.ping_self2}.*(${Mqemu.ping_self2})"/>
        <v531 found="yes" search="trace  1  ${Mqemu.ping_remote2}.*(${Mqemu.ping_remote2})"/>
        <v63 found="yes" search="trace  1  ${Mqemu.ping_self3}.*(${Mqemu.ping_self3})"/>
        <v631 found="yes" search="trace  1  ${Mqemu.ping_remote3}.*(${Mqemu.ping_remote3})"/>
        <v4 found="yes" search="traceroute to ${Mqemu.ping_self1}.*(${Mqemu.ping_self1})"/>
        <v41 found="yes" search="traceroute to ${Mqemu.ping_remote1}.*(${Mqemu.ping_remote1})"/>
        <v54 found="yes" search="traceroute to ${Mqemu.ping_self2}.*(${Mqemu.ping_self2})"/>
        <v541 found="yes" search="traceroute to ${Mqemu.ping_remote2}.*(${Mqemu.ping_remote2})"/>
        <v64 found="yes" search="traceroute to ${Mqemu.ping_self3}.*(${Mqemu.ping_self3})"/>
        <v641 found="yes" search="traceroute to ${Mqemu.ping_remote3}.*(${Mqemu.ping_remote3})"/>
        <v32 found="yes" search="trace  1  ${Mqemu.ping6_self1}.*(${Mqemu.ping6_self1})"/>
        <v33 found="yes" search="trace  1  ${Mqemu.ping6_remote1}.*(${Mqemu.ping6_remote1})"/>
        <v532 found="yes" search="trace  1  ${Mqemu.ping6_self2}.*(${Mqemu.ping6_self2})"/>
        <v533 found="yes" search="trace  1  ${Mqemu.ping6_remote2}.*(${Mqemu.ping6_remote2})"/>
        <v632 found="yes" search="trace  1  ${Mqemu.ping6_self3}.*(${Mqemu.ping6_self3})"/>
        <v633 found="yes" search="trace  1  ${Mqemu.ping6_remote3}.*(${Mqemu.ping6_remote3})"/>
        <v42 found="yes" search="traceroute to ${Mqemu.ping6_self1}.*(${Mqemu.ping6_self1})"/>
        <v43 found="yes" search="traceroute to ${Mqemu.ping6_remote1}.*(${Mqemu.ping6_remote1})"/>
        <v542 found="yes" search="traceroute to ${Mqemu.ping6_self2}.*(${Mqemu.ping6_self2})"/>
        <v543 found="yes" search="traceroute to ${Mqemu.ping6_remote2}.*(${Mqemu.ping6_remote2})"/>
        <v642 found="yes" search="traceroute to ${Mqemu.ping6_self3}.*(${Mqemu.ping6_self3})"/>
        <v643 found="yes" search="traceroute to ${Mqemu.ping6_remote3}.*(${Mqemu.ping6_remote3})"/>
        <v7 found="no" search=".*!H.*"/>
    </testdata>
    <testdata row="1" execute="yes" title="provision_denial_when_prerequisites_are_not_met">
        <command   send="configure"/>
        <command send="set interfaces interface ${ip_interface.value} type ip enabled ipv4 address-src ${Interface.NEM_Intf}"   verify="v1"/>
        <command   send="commit" verify="v2"/>
        <command end="Discard changes and continue?.*"  send="exit"/>
        <command end="${oper_prompt.value}"  send="yes" verify="v1"/>
        <v1 search="${success_string.value}" found="yes" />
        <v2 search="${success_string.value}" found="no" />
    </testdata>
    <testdata row="1" execute="yes" title="provisioning_when_prerequisites_are_met">
        <command   send="configure"/>
        <command send="set eqpt shelf ${shelf.value} slot ${slot.value} subslot ${subslot.value} port OSC pluggableInterfaceType OSC admin-status up"   verify="v1"/>
        <command send="set eqpt shelf ${shelf.value} slot ${slot.value} subslot ${subslot.value} port E-SC-E1 pluggableInterfaceType 1GEX admin-status up"   verify="v1"/>
        <command send="set interfaces interface ${eth_interface.value} type ethernetCsmacd"   verify="v1"/>
        <command send="set interfaces interface ${Interface.NEM_Intf} type ip enabled ipv4 address ${ip1.value} prefix-length ${prefix.value} preferred true"   verify="v1"/>
        <command send="set interfaces interface ${ip_interface.value} type ip enabled ipv4 address-src ${Interface.NEM_Intf}"   verify="v1"/>
        <command   send="commit" verify="v1"/>
        <command end="${oper_prompt.value}"  send="exit" verify="v1"/>
        <v1 search="${success_string.value}" found="yes" />
    </testdata>
    <testdata row="1" execute="yes" title="verify_provisioning_of_ip_interface">
        <command   send="configure"/>
        <command send="show interfaces interface ${ip_interface.value} | nom"   verify="v1,v2,v3,v4,v5,v6"/>
        <command   send="commit" verify="v1"/>
        <command end="${oper_prompt.value}"  send="exit" verify="v1"/>
        <v1 search="${success_string.value}" found="yes" />
        <v2 search="${default_mtu_size.value}" found="yes" />
        <v3 search="${forwarding_state.disabled}" found="yes" />
        <v4 search="${address_src.value}" found="yes" />
        <v5 search="${interface_state.value}" found="yes" />
        <v6 search="${interface_type.value}" found="yes" />
    </testdata>
    <testdata row="1" execute="yes" title="enable_static_route_ipv4_with_outgoing_interface">
        <command   send="configure"/>
        <command send="set routing routing-instance ${routing_instance.value} enabled"   verify="v1"/>
        <command send="set routing routing-instance ${routing_instance.value} interfaces interface ${ip_interface.value}"   verify="v1"/>
        <command send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol static ${static_routing_instance.value} static-routes ipv4 route ${destination.value} next-hop outgoing-interface ${ip_interface.value}"   verify="v1"/>
        <command   send="commit" verify="v1"/>
        <command end="${oper_prompt.value}"  send="exit" verify="v1"/>
        <v1 search="${success_string.value}" found="yes" />
    </testdata>
    <testdata row="1" execute="yes" title="reprovision_ip_interface_and_static_route">
        <command   send="configure"/>
	<command send="set interfaces interface ${eth_interface.value} type ethernetCsmacd"   verify="v1"/>
        <command send="set interfaces interface ${Interface.NEM_Intf} type ip enabled ipv4 address ${ip1.value} prefix-length ${prefix.value} preferred true"   verify="v1"/>
        <command send="set interfaces interface ${ip_interface.value} type ip enabled ipv4 address-src ${Interface.NEM_Intf}"   verify="v1"/>
        <command send="set routing routing-instance ${routing_instance.value} enabled"   verify="v1"/>
        <command send="set routing routing-instance ${routing_instance.value} interfaces interface ${ip_interface.value}"   verify="v1"/>
        <command send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol static ${static_routing_instance.value} static-routes ipv4 route ${destination.value} next-hop outgoing-interface ${ip_interface.value}"   verify="v1"/>
        <command   send="commit" verify="v1"/>
        <command end="${oper_prompt.value}"  send="exit" verify="v1"/>
        <v1 search="${success_string.value}" found="yes" />
    </testdata>
    <testdata row="1" execute="yes" title="reprovision_of_ip_interface_and_ospf">
        <command   send="configure"/>
        <command send="set eqpt shelf ${shelf.value} slot ${slot.value} subslot ${subslot.value} port OSC pluggableInterfaceType OSC"   verify="v1"/>
        <command send="set eqpt shelf ${shelf.value} slot ${slot.value} subslot ${subslot.value} port E-SC-E1 pluggableInterfaceType 1GEX admin-status up"   verify="v1"/>
        <command send="set interfaces interface ${eth_interface.value} type ethernetCsmacd"   verify="v1"/>
        <command send="set interfaces interface ${Interface.NEM_Intf} type ip enabled ipv4 address ${ip1.value} prefix-length ${prefix.value} preferred true"   verify="v1"/>
        <command send="set interfaces interface ${ip_interface.value} type ip enabled ipv4 address-src ${Interface.NEM_Intf}"   verify="v1"/>
        <command send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4"   verify="v1"/>
        <command send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${router_id.value}"   verify="v1"/>
        <command send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 area ${backbone_area.value}"   verify="v1"/>
        <command send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 area ${backbone_area.vale} interface ${network1.ne1.shelf1.LCN1.int_ip_name}"   verify="v1"/>
        <command send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 area ${backbone_area.value} interface ${network1.ne1.shelf1.LCN2.int_ip_name}"   verify="v1"/>
        <command   send="commit" verify="v1"/>
        <command end="${oper_prompt.value}"  send="exit" verify="v1"/>
        <v1 search="${success_string.value}" found="yes" />
    </testdata>
    <testdata row="1" execute="yes" title="enable_ospf_at_system_level">
        <command   send="configure"/>
        <command send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4"   verify="v1"/>
        <command send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${router_id.value}"   verify="v1"/>
        <command send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 area ${backbone_area.value}"   verify="v1"/>
        <command   send="commit" verify="v1"/>
        <command end="${oper_prompt.value}"  send="exit" verify="v1"/>
        <v1 search="${success_string.value}" found="yes" />
    </testdata>
    <testdata row="1" execute="yes" title="enable_ospf_at_interface_level">
        <command   send="configure"/>
        <command send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 area ${backbone_area.value} interface ${network1.ne1.shelf1.LCN1.int_ip_name}"   verify="v1"/>
        <command send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 area ${backbone_area.value} interface ${network1.ne1.shelf1.LCN2.int_ip_name}"   verify="v1"/>
        <command   send="commit" verify="v1"/>
        <command end="${oper_prompt.value}"  send="exit" verify="v1"/>
        <v1 search="${success_string.value}" found="yes" />
    </testdata>
    <testdata row="1" execute="yes" title="verify_static_route_configuration">
        <command   send="configure"/>
        <command send="show routing routing-instance ${routing_instance.value} routing-protocols routing-protocol static-routes ipv4 | nom"   verify="v1,v2,v3,v4"/>
        <command   send="commit" verify="v1"/>
        <command end="${oper_prompt.value}"  send="exit" verify="v1"/>
        <v1 search="${success_string.value}" found="yes" />
        <v2 search="${static_routing_instance.value}" found="yes" />
        <v3 search="${destination.value}" found="yes" />
        <v4 search="${ip_interface.value}" found="yes" />
    </testdata>
    <testdata row="1" execute="yes" title="verify_ospf_configuration">
        <command   send="configure"/>
        <command send="show routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 ospf ospf instance ${routing_instance.value} ipv4 | nom"   verify="v1"/>
        <command   send="commit" verify="v1"/>
        <command end="${oper_prompt.value}"  send="exit" verify="v1"/>
        <v1 search="${success_string.value}" found="yes" />
    </testdata>
    <testdata row="1" execute="yes" title="delete_ip_interface">
        <command   send="configure"/>
        <command send="delete interfaces interface ${ip_interface.value}"   verify="v1"/>
        <command   send="commit" verify="v1"/>
        <command end="${oper_prompt.value}"  send="exit" verify="v1"/>
        <v1 search="${success_string.value}" found="yes" />
    </testdata>
    <testdata row="2" execute="yes" title="delete_ip_interface">
        <command   send="configure"/>
        <command send="delete interfaces interface ${ip_interface.value}"   verify="v1"/>
        <command   send="commit" verify="v2"/>
        <command end="Discard changes and continue?.*"  send="exit"/>
        <command end="${oper_prompt.value}"  send="yes" verify="v1"/>
        <v1 search="${success_string.value}" found="yes" />
        <v2 search="${success_string.value}" found="no" />
    </testdata>
    <testdata row="1" execute="yes" title="clean_up_configuration">
        <command   send="configure"/>
        <command send="delete interfaces interface ${Interface.NEM_Intf} ipv4 address ${ip1.value}"   verify="v1"/>
        <command send="delete interfaces interface ${Interface.NEM_Intf} ipv4"   verify="v1"/>
        <command send="delete interfaces interface ${Interface.NEM_Intf}"   verify="v1"/>
        <command send="delete interfaces interface ${eth_interface.value}"   verify="v1"/>
        <command send="delete eqpt shelf 1 slot 0 subslot 0 port E-SC-E1"   verify="v1"/>
        <command send="delete eqpt shelf 1 slot 0 subslot 0 port OSC"   verify="v1"/>
        <command   send="commit" verify="v1"/>
        <command end="${oper_prompt.value}"  send="exit" verify="v1"/>
        <v1 search="${success_string.value}" found="yes" />
    </testdata>
    <testdata row="1" execute="yes"  title="delete_static_route">
        <command   send="configure"/>
        <command send="set routing routing-instance ${routing_instance.value}"   verify="v1"/>
        <command send=" delete routing routing-instance ${routing_instance.value} interfaces interface"   verify="v1"/>
        <command send="delete routing routing-instance ${routing_instance.value} routing-protocols routing-protocol static ${static_routing_instance.value}"   verify="v1"/>
        <command send="delete routing routing-instance ${routing_instance.value}"   verify="v1"/>
        <command   send="commit" verify="v1"/>
        <command end="${oper_prompt.value}"  send="exit" verify="v1"/>
        <v1 search="${success_string.value}" found="yes" />
    </testdata>
    <testdata row="1" execute="yes" title="disable_ospf">
        <command   send="configure"/>
        <command send="delete routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 ospf ospf instance ${routing_instance.value} ipv4 router-id ${router_id.value}"   verify="v1"/>
        <command send="delete routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 ospf ospf instance ${routing_instance.value} ipv4 area ${backbone_area.value}"   verify="v1"/>
        <command send="delete routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 ospf"   verify="v1"/>
        <command   send="commit" verify="v1"/>
        <command end="${oper_prompt.value}"  send="exit" verify="v1"/>
        <v1 search="${success_string.value}" found="yes" />
    </testdata>
    <testdata row="1" execute="yes" title="delete_ospf_area">
        <command   send="configure"/>
        <command send="delete routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 ospf ospf instance ${routing_instance.value} ipv4 area ${backbone_area.value}"   verify="v1"/>
        <command   send="commit" verify="v1"/>
        <command end="${oper_prompt.value}"  send="exit" verify="v1"/>
        <v1 search="${success_string.value}" found="yes" />
    </testdata>
    <testdata title="configure_ospfv2_instance_and_verify" execute="yes" row="1">
        <command verify="" end="Value for \'router-id\'.*"  send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 ospf ospf instance ${routing_instance.value} ipv4"/>
        <command verify="v1"   send="${routing_id.value}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 ospf ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command verify="v1"   send="commit"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
    </testdata>
    <testdata title="configure_ospfv2_instance_with_different_instance_name" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${different_instance.value} ipv4 router-id ${routing_id.value}"/>
        <command verify="v2,v3"   send="commit"/>
        <command end="Discard changes and continue?.*"  send="exit"/>
        <command end="${oper_prompt.value}"  send="yes" verify="v1"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="Aborted:"/>
        <v3 found="yes" search="error"/>
    </testdata>
    <testdata title="configure_ospfv2_instance_with_invalid_router_id" execute="yes" row="1">
        <command verify="v1"   send="configure"/>
        <command verify="v2"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${invalid_routing_id.value}"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="syntax error:.*${invalid_routing_id.value}.*is not a valid value."/>
    </testdata>
    <testdata title="enable_and_disable_graceful_restart_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} graceful-restart enable ${graceful-restart.enable}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} graceful-restart enable ${graceful-restart.disable}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v5,v6"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command verify="v1"   send="commit"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="enable           ${graceful-restart.enable};"/>
        <v5 found="yes" search="enable           ${graceful-restart.disable};"/>
        <v6 found="yes" search="restart-interval ${default_restart_interval.value};"/>
    </testdata>
    <testdata title="enable_and_disable_helper_mode_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} graceful-restart helper-enable ${helper-mode.enable}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} graceful-restart helper-enable ${helper-mode.disable}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v5,v6"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command verify="v1"   send="commit"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="helper-enable    ${helper-mode.enable};"/>
        <v5 found="yes" search="helper-enable    ${helper-mode.disable};"/>
        <v6 found="yes" search="restart-interval ${default_restart_interval.value};"/>
    </testdata>
    <testdata title="modify_restart_interval_and_verify" execute="yes" row="1">
        <command verify="v1"    send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} graceful-restart restart-interval ${restart_interval.value}"/>
        <command verify="v1"  timeout="120"  send="commit"/>
        <command verify="v1,v2,v3,v4"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} graceful-restart restart-interval ${default_restart_interval.value}"/>
        <command verify="v1"  timeout="120"  send="commit"/>
        <command verify="v1,v2,v3,v5"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command verify="v1"  timeout="120"  send="commit"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="restart-interval ${restart_interval.value};"/>
        <v5 found="yes" search="restart-interval ${default_restart_interval.value};"/>
    </testdata>
    <testdata title="configure_admin_distance_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} admin-distance external ${admin_distance.external} inter-area ${admin_distance.inter-area} intra-area ${admin_distance.intra-area}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v6,v7"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command verify="v1"   send="commit"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="restart-interval ${default_restart_interval.value};"/>
        <v5 found="yes" search="intra-area.*${admin_distance.intra-area}"/>
        <v6 found="yes" search="inter-area.*${admin_distance.inter-area}"/>
        <v7 found="yes" search="external   ${admin_distance.external}"/>
    </testdata>
    <testdata title="configure_area_in_dotted_decimal_format_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command verify="v1"   send="commit"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="area.*${area.dotted_decimal}"/>
    </testdata>
    <testdata title="associate_LCN_interface_with_backbone_area_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} type ethernetCsmacd" />
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} type ip" />
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 enabled"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 forwarding true address ${ospf.ospf_ip1} netmask ${ospf.netmask}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command   send="commit" verify="v1"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="area.*${area.dotted_decimal}"/>
        <v5 found="yes" search="interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
    </testdata>
    <testdata title="configure_plain_text_authentication_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name} authentication key ${authentication.string1}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v6"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name} authentication key ${authentication.string2}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v7"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name} authentication key ${authentication.string3}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v8"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command   send="commit" verify="v1"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="area.*${area.dotted_decimal}"/>
        <v5 found="yes" search="interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <v6 found="yes" search="key ${authentication.string1}"/>
        <v7 found="yes" search="key ${authentication.string2}"/>
        <v8 found="yes" search="key ${authentication.string3}"/>
    </testdata>
    <testdata title="configure_md5_authentication_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} type ip ipv4 enabled address ${network1.ne1.shelf1.LCN1.ip_address} netmask ${network1.ne1.shelf1.LCN1.netmask}"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} type ip ipv4 enabled address ${network1.ne1.shelf1.LCN2.ip_address} netmask ${network1.ne1.shelf1.LCN2.netmask}"/>
        <command verify="v1"   send="set key-chains key-chain-list ${key_chain.list_name} key-chain-entry ${key_chain.length} key-string keystring ${key_chain.string1}"/>
        <command verify="v1"   send="set key-chains key-chain-list ${key_chain.list_name} key-chain-entry ${key_chain.length} crypto-algorithm ${key_chain.algo}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name} authentication key-chain ${key_chain.list_name}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v6"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v7"   send="show key-chains"/>
        <command verify="v1"   send="set key-chains key-chain-list ${key_chain.list_name} key-chain-entry ${key_chain.length} key-string keystring ${key_chain.string2}"/>
        <command verify="v1"   send="set key-chains key-chain-list ${key_chain.list_name} key-chain-entry ${key_chain.length} crypto-algorithm ${key_chain.algo}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name} authentication key-chain ${key_chain.list_name}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v6"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v8"   send="show key-chains"/>
        <command verify="v1"   send="set key-chains key-chain-list ${key_chain.list_name} key-chain-entry ${key_chain.length} key-string keystring ${key_chain.string3}"/>
        <command verify="v1"   send="set key-chains key-chain-list ${key_chain.list_name} key-chain-entry ${key_chain.length} crypto-algorithm ${key_chain.algo}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name} authentication key-chain ${key_chain.list_name}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v6"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v9"   send="show key-chains"/>
        <command verify="v1"   send="delete routing routing-instance ${routing_instance.value}"/>
        <command verify="v1"   send="delete key-chains key-chain-list"/>
        <command verify="v1"   send="commit"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="area.*${area.dotted_decimal}"/>
        <v5 found="yes" search="interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <v6 found="yes" search="key-chain ${key_chain.list_name};"/>
        <v7 found="yes" search="keystring.*${key_chain.string1}.*"/>
        <v8 found="yes" search="keystring.*${key_chain.string2}.*"/>
        <v9 found="yes" search="keystring.*${key_chain.string3}.*"/>
    </testdata>
    <testdata title="configure_hello_interval_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name}  hello-interval ${hello_interval.value1}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v6"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name}  hello-interval ${hello_interval.value2}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v7"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name}  hello-interval ${hello_interval.value3}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v8"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v9"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name}  hello-interval ${hello_interval.value4}"/>
        <command verify="v1,v2,v3,v4,v5,v10"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v11"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name}  hello-interval ${hello_interval.value5}"/>
        <command verify="v1,v2,v3,v4,v5,v12"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command   send="commit" verify="v1"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="area.*${area.dotted_decimal}"/>
        <v5 found="yes" search="interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <v6 found="yes" search="hello-interval ${hello_interval.value1};"/>
        <v7 found="yes" search="hello-interval ${hello_interval.value2};"/>
        <v8 found="yes" search="hello-interval ${hello_interval.value3};"/>
        <v9 found="yes" search="syntax error:.*${hello_interval.value4}.* is not a valid value"/>
        <v10 found="no" search="hello-interval ${hello_interval.value4};"/>
        <v11 found="yes" search="syntax error:.*${hello_interval.value5}.* is not a valid value"/>
        <v12 found="no" search="hello-interval ${hello_interval.value5};"/>
    </testdata>
    <testdata title="configure_dead_interval_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name} hello-interval ${hello_interval.value1} dead-interval ${dead_interval.value1}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v6"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name} hello-interval ${hello_interval.value1} dead-interval ${dead_interval.value2}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v7,v13"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name} hello-interval ${hello_interval.value1} dead-interval ${dead_interval.value3}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v8,v13"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v9"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name} hello-interval ${hello_interval.value1} dead-interval ${dead_interval.value4}"/>
        <command verify="v1,v2,v3,v4,v5,v10"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v11"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name} hello-interval ${hello_interval.value1} dead-interval ${dead_interval.value5}"/>
        <command verify="v1,v2,v3,v4,v5,v12"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command   send="commit" verify="v1"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="area.*${area.dotted_decimal}"/>
        <v5 found="yes" search="interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <v6 found="yes" search="dead-interval  ${dead_interval.value1};"/>
        <v7 found="yes" search="dead-interval  ${dead_interval.value2};"/>
        <v8 found="yes" search="dead-interval  ${dead_interval.value3};"/>
        <v9 found="yes" search="syntax error:.*${dead_interval.value4}.* is not a valid value"/>
        <v10 found="no" search="dead-interval ${dead_interval.value4};"/>
        <v11 found="yes" search="syntax error:.*${dead_interval.value5}.* is not a valid value"/>
        <v12 found="no" search="dead-interval ${dead_interval.value5};"/>
        <v13 found="yes" search="hello-interval ${hello_interval.value1};"/>
    </testdata>
    <testdata title="configure_retransmit_interval_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name}  retransmit-interval ${retransmit_interval.value1}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v6"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name}  retransmit-interval ${retransmit_interval.value2}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v7"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name}  retransmit-interval ${retransmit_interval.value3}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v8"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v9"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name}  retransmit-interval ${retransmit_interval.value4}"/>
        <command verify="v1,v2,v3,v4,v5,v10"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v11"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name}  retransmit-interval ${retransmit_interval.value5}"/>
        <command verify="v1,v2,v3,v4,v5,v12"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v13"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name}  retransmit-interval ${retransmit_interval.value6}"/>
        <command verify="v1,v2,v3,v4,v5,v14"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command   send="commit" verify="v1"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="area.*${area.dotted_decimal}"/>
        <v5 found="yes" search="interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <v6 found="yes" search="retransmit-interval ${retransmit_interval.value1};"/>
        <v7 found="yes" search="retransmit-interval ${retransmit_interval.value2};"/>
        <v8 found="yes" search="retransmit-interval ${retransmit_interval.value3};"/>
        <v9 found="yes" search="syntax error:.*${retransmit_interval.value4}.* is not a valid value"/>
        <v10 found="no" search="retransmit-interval ${retransmit_interval.value4};"/>
        <v11 found="yes" search="syntax error:.*${retransmit_interval.value5}.* is not a valid value"/>
        <v12 found="no" search="retransmit-interval ${retransmit_interval.value5};"/>
        <v13 found="yes" search="syntax error: Configured value is out of range"/>
        <v14 found="no" search="retransmit-interval ${retransmit_interval.value6};"/>
    </testdata>
    <testdata title="configure_transmit_delay_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name} transmit-delay ${transmit_delay.value1}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v6"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name} transmit-delay ${transmit_delay.value2}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v7"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name} transmit-delay ${transmit_delay.value3}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v8"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v9"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name} transmit-delay ${transmit_delay.value4}"/>
        <command verify="v1,v2,v3,v4,v5,v10"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v11"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name}  transmit-delay ${transmit_delay.value5}"/>
        <command verify="v1,v2,v3,v4,v5,v12"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command   send="commit" verify="v1"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="area.*${area.dotted_decimal}"/>
        <v5 found="yes" search="interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <v6 found="yes" search="transmit-delay ${transmit_delay.value1};"/>
        <v7 found="yes" search="transmit-delay ${transmit_delay.value2};"/>
        <v8 found="yes" search="transmit-delay ${transmit_delay.value3};"/>
        <v9 found="yes" search="syntax error:.*${transmit_delay.value4}.* is not a valid value"/>
        <v10 found="no" search="transmit-delay ${transmit_delay.value4};"/>
        <v11 found="yes" search="syntax error:.*${transmit_delay.value5}.* is not a valid value"/>
        <v12 found="no" search="transmit-delay ${transmit_delay.value5};"/>
    </testdata>
    <testdata title="configure_interface_cost_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name} cost ${interface_cost.value}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v6"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command   send="commit" verify="v1"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="area.*${area.dotted_decimal}"/>
        <v5 found="yes" search="interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <v6 found="yes" search="cost ${interface_cost.value};"/>
    </testdata>
    <testdata title="enable_and_disable_mtu_ignore_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name} mtu-ignore ${mtu-ignore.enable}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v6"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name} mtu-ignore ${mtu-ignore.disable}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v7"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command   send="commit" verify="v1"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="area.*${area.dotted_decimal}"/>
        <v5 found="yes" search="interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <v6 found="yes" search="mtu-ignore ${mtu-ignore.enable};"/>
        <v7 found="yes" search="mtu-ignore ${mtu-ignore.disable};"/>
    </testdata>
    <testdata title="configure_ospf_interface_as_passive_and_no_passive_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name} passive ${passive.enable}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v6"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name} passive ${passive.disable}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v7"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command   send="commit" verify="v1"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="area.*${area.dotted_decimal}"/>
        <v5 found="yes" search="interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <v6 found="yes" search="passive ${passive.enable};"/>
        <v7 found="yes" search="passive ${passive.disable};"/>
    </testdata>
    <testdata title="configure_ospf_interface_with_different_netowrk_type_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name} network-type ${network-type.point-to-point}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v6"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} interface ${network1.ne1.shelf1.LCN1.int_ip_name}  network-type ${network-type.broadcast}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v7"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command   send="commit" verify="v1"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="area.*${area.dotted_decimal}"/>
        <v5 found="yes" search="interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <v6 found="yes" search="network-type ${network-type.point-to-point};"/>
        <v7 found="yes" search="network-type ${network-type.broadcast};"/>
    </testdata>
    <testdata title="associate_LCN_interface_with_normal_area_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} area-type ${area-type.normal} interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command   send="commit" verify="v1"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="area.*${area.dotted_decimal}"/>
        <v5 found="yes" search="interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <v6 found="yes" search="area-type ${area-type.normal};"/>
    </testdata>
    <testdata title="associate_LCN_interface_with_stub_area_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} area-type ${area-type.stub} interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v6"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command   send="commit" verify="v1"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="area.*${area.dotted_decimal}"/>
        <v5 found="yes" search="interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <v6 found="yes" search="area-type ${area-type.stub};"/>
    </testdata>
    <testdata title="associate_LCN_interface_with_nssa_area_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} area-type ${area-type.nssa} interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v6"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command   send="commit" verify="v1"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="area.*${area.dotted_decimal}"/>
        <v5 found="yes" search="interface ${network1.ne1.shelf1.LCN1.int_ip_name}"/>
        <v6 found="yes" search="area-type ${area-type.nssa};"/>
    </testdata>
    <testdata title="enable_ospf_area_range_advertise_with_cost_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} range ${route_advertise.range} advertise ${route_advertise.enable} cost ${route_advertise.cost}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v6,v7"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${area.dotted_decimal} range ${route_advertise.range} advertise ${route_advertise.disable} cost ${route_advertise.cost}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5,v7,v8"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}"   verify="v1"/>
        <command send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_name}"   verify="v1"/>
        <command send="delete eqpt shelf 1 slot 0 subslot 0 port LCN1"   verify="v1"/>
        <command   send="commit" verify="v1"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="area.*${area.dotted_decimal}"/>
        <v5 found="yes" search="range ${route_advertise.range}"/>
        <v6 found="yes" search="advertise ${route_advertise.enable};"/>
        <v7 found="yes" search="cost      ${route_advertise.cost};"/>
        <v8 found="yes" search="advertise ${route_advertise.disable};"/>
    </testdata>
    <testdata title="redistribute_LCN_networks_into_ospf_networks_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} redistribute interface cost ${redistribution_cost.value}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command   send="commit" verify="v1"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="(?s)redistribute.*cost.*${redistribution_cost.value}.*LCN.*enable.*true.*LMP.*enable.*true.*"/>
        <v5 found="yes" search="cost ${redistribution_cost.value};"/>
    </testdata>
    <testdata title="redistribute_LMP_networks_into_ospf_networks_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} redistribute interface cost ${redistribution_cost.value}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command   send="commit" verify="v1"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="(?s)redistribute.*cost.*${redistribution_cost.value}.*LCN.*LMP.*enable.*true.*"/>
        <v5 found="yes" search="cost ${redistribution_cost.value};"/>
    </testdata>
    <testdata title="redistribute_static_networks_into_ospf_networks_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} redistribute static cost ${redistribution_cost.value}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command   send="commit" verify="v1"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="(?s)redistribute.*static.*cost.*1234.*"/>
        <v5 found="yes" search="cost ${redistribution_cost.value};"/>
    </testdata>
    <testdata title="configure_ospf_network_into_LCN1_interface_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set eqpt shelf 1 slot 0 subslot 0 port LCN1 pluggableInterfaceType 1GEX admin-status up"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_name} type ethernetCsmacd" />
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} type ip" />
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 enabled"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name} ipv4 forwarding true address ${ospf.ospf_ip1} netmask ${ospf.netmask}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} network ${ospf.network1} ${ospf.netmask} area ${area.dotted_decimal}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_ip_name}"   verify="v1"/>
        <command send="delete interfaces interface ${network1.ne1.shelf1.LCN1.int_name}"   verify="v1"/>
        <command send="delete eqpt shelf 1 slot 0 subslot 0 port LCN1"   verify="v1"/>
        <command   send="commit" verify="v1"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="area.*${area.dotted_decimal}"/>
        <v5 found="yes" search="network ${ospf.network1} ${ospf.netmask}"/>
    </testdata>
    <testdata title="configure_ospf_network_on_LCN2_interface_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_name} type ethernetCsmacd" />
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} type ip" />
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 enabled"/>
        <command verify="v1"   send="set interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name} ipv4 forwarding true address ${ospf.ospf_ip1} netmask ${ospf.netmask}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} network ${ospf.network1} ${ospf.netmask} area ${area.dotted_decimal}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command send="delete interfaces interface ${network1.ne1.shelf1.LCN2.int_ip_name}"   verify="v1"/>
        <command send="delete interfaces interface ${network1.ne1.shelf1.LCN2.int_name}"   verify="v1"/>
        <command send="delete eqpt shelf 1 slot 0 subslot 0 port LCN2"   verify="v1"/>
        <command   send="commit" verify="v1"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="area.*${area.dotted_decimal}"/>
        <v5 found="yes" search="network ${ospf.network1} ${ospf.netmask}"/>
    </testdata>
    <testdata title="configure_max_of_20_stub_area_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${backbone_area.value} area-type ${area-type.stub}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area1} area-type ${area-type.stub}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area2} area-type ${area-type.stub}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area3} area-type ${area-type.stub}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area4} area-type ${area-type.stub}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area5} area-type ${area-type.stub}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area6} area-type ${area-type.stub}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area7} area-type ${area-type.stub}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area8} area-type ${area-type.stub}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area9} area-type ${area-type.stub}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area10} area-type ${area-type.stub}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area11} area-type ${area-type.stub}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area12} area-type ${area-type.stub}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area13} area-type ${area-type.stub}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area14} area-type ${area-type.stub}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area15} area-type ${area-type.stub}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area16} area-type ${area-type.stub}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area17} area-type ${area-type.stub}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area18} area-type ${area-type.stub}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area19} area-type ${area-type.stub}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area20} area-type ${area-type.stub}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command   send="commit" verify="v1"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="area.*${backbone_area.value}"/>
        <v5 found="yes" search="area.*${ospf.area1}"/>
        <v6 found="yes" search="area.*${ospf.area2}"/>
        <v7 found="yes" search="area.*${ospf.area3}"/>
        <v8 found="yes" search="area.*${ospf.area4}"/>
        <v9 found="yes" search="area.*${ospf.area5}"/>
        <v10 found="yes" search="area.*${ospf.area6}"/>
        <v11 found="yes" search="area.*${ospf.area7}"/>
        <v12 found="yes" search="area.*${ospf.area8}"/>
        <v13 found="yes" search="area.*${ospf.area9}"/>
        <v14 found="yes" search="area.*${ospf.area10}"/>
        <v15 found="yes" search="area.*${ospf.area11}"/>
        <v16 found="yes" search="area.*${ospf.area12}"/>
        <v17 found="yes" search="area.*${ospf.area13}"/>
        <v18 found="yes" search="area.*${ospf.area14}"/>
        <v19 found="yes" search="area.*${ospf.area15}"/>
        <v20 found="yes" search="area.*${ospf.area16}"/>
        <v21 found="yes" search="area.*${ospf.area17}"/>
        <v22 found="yes" search="area.*${ospf.area18}"/>
        <v23 found="yes" search="area.*${ospf.area19}"/>
        <v24 found="yes" search="area.*${ospf.area20}"/>
        <v25 found="yes" search="area-type ${area-type.stub};"/>
    </testdata>
    <testdata title="configure_max_of_20_normal_area_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${backbone_area.value} area-type ${area-type.normal}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area1} area-type ${area-type.normal}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area2} area-type ${area-type.normal}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area3} area-type ${area-type.normal}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area4} area-type ${area-type.normal}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area5} area-type ${area-type.normal}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area6} area-type ${area-type.normal}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area7} area-type ${area-type.normal}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area8} area-type ${area-type.normal}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area9} area-type ${area-type.normal}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area10} area-type ${area-type.normal}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area11} area-type ${area-type.normal}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area12} area-type ${area-type.normal}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area13} area-type ${area-type.normal}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area14} area-type ${area-type.normal}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area15} area-type ${area-type.normal}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area16} area-type ${area-type.normal}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area17} area-type ${area-type.normal}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area18} area-type ${area-type.normal}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area19} area-type ${area-type.normal}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area20} area-type ${area-type.normal}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command   send="commit" verify="v1"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="area.*${backbone_area.value}"/>
        <v5 found="yes" search="area.*${ospf.area1}"/>
        <v6 found="yes" search="area.*${ospf.area2}"/>
        <v7 found="yes" search="area.*${ospf.area3}"/>
        <v8 found="yes" search="area.*${ospf.area4}"/>
        <v9 found="yes" search="area.*${ospf.area5}"/>
        <v10 found="yes" search="area.*${ospf.area6}"/>
        <v11 found="yes" search="area.*${ospf.area7}"/>
        <v12 found="yes" search="area.*${ospf.area8}"/>
        <v13 found="yes" search="area.*${ospf.area9}"/>
        <v14 found="yes" search="area.*${ospf.area10}"/>
        <v15 found="yes" search="area.*${ospf.area11}"/>
        <v16 found="yes" search="area.*${ospf.area12}"/>
        <v17 found="yes" search="area.*${ospf.area13}"/>
        <v18 found="yes" search="area.*${ospf.area14}"/>
        <v19 found="yes" search="area.*${ospf.area15}"/>
        <v20 found="yes" search="area.*${ospf.area16}"/>
        <v21 found="yes" search="area.*${ospf.area17}"/>
        <v22 found="yes" search="area.*${ospf.area18}"/>
        <v23 found="yes" search="area.*${ospf.area19}"/>
        <v24 found="yes" search="area.*${ospf.area20}"/>
        <v25 found="yes" search="area-type ${area-type.normal};"/>
    </testdata>
    <testdata title="configure_max_of_20_nssa_area_and_verify" execute="yes" row="1">
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${backbone_area.value} area-type ${area-type.nssa}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area1} area-type ${area-type.nssa}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area2} area-type ${area-type.nssa}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area3} area-type ${area-type.nssa}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area4} area-type ${area-type.nssa}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area5} area-type ${area-type.nssa}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area6} area-type ${area-type.nssa}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area7} area-type ${area-type.nssa}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area8} area-type ${area-type.nssa}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area9} area-type ${area-type.nssa}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area10} area-type ${area-type.nssa}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area11} area-type ${area-type.nssa}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area12} area-type ${area-type.nssa}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area13} area-type ${area-type.nssa}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area14} area-type ${area-type.nssa}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area15} area-type ${area-type.nssa}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area16} area-type ${area-type.nssa}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area17} area-type ${area-type.nssa}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area18} area-type ${area-type.nssa}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area19} area-type ${area-type.nssa}"/>
        <command verify="v1"   send="set routing routing-instance ${routing_instance.value} routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} ipv4 router-id ${routing_id.value} area ${ospf.area20} area-type ${area-type.nssa}"/>
        <command verify="v1"   send="commit"/>
        <command verify="v1,v2,v3,v4,v5"   send="show routing routing-instance routing-protocols routing-protocol ospfv2 OSPF ospf instance ${routing_instance.value} | nom"/>
        <command verify="v1"   send=" delete routing routing-instance ${routing_instance.value}"/>
        <command   send="commit" verify="v1"/>
        <v1 found="yes" search="ok"/>
        <v2 found="yes" search="instance ${routing_instance.value} ipv4"/>
        <v3 found="yes" search="router-id ${routing_id.value}"/>
        <v4 found="yes" search="area.*${backbone_area.value}"/>
        <v5 found="yes" search="area.*${ospf.area1}"/>
        <v6 found="yes" search="area.*${ospf.area2}"/>
        <v7 found="yes" search="area.*${ospf.area3}"/>
        <v8 found="yes" search="area.*${ospf.area4}"/>
        <v9 found="yes" search="area.*${ospf.area5}"/>
        <v10 found="yes" search="area.*${ospf.area6}"/>
        <v11 found="yes" search="area.*${ospf.area7}"/>
        <v12 found="yes" search="area.*${ospf.area8}"/>
        <v13 found="yes" search="area.*${ospf.area9}"/>
        <v14 found="yes" search="area.*${ospf.area10}"/>
        <v15 found="yes" search="area.*${ospf.area11}"/>
        <v16 found="yes" search="area.*${ospf.area12}"/>
        <v17 found="yes" search="area.*${ospf.area13}"/>
        <v18 found="yes" search="area.*${ospf.area14}"/>
        <v19 found="yes" search="area.*${ospf.area15}"/>
        <v20 found="yes" search="area.*${ospf.area16}"/>
        <v21 found="yes" search="area.*${ospf.area17}"/>
        <v22 found="yes" search="area.*${ospf.area18}"/>
        <v23 found="yes" search="area.*${ospf.area19}"/>
        <v24 found="yes" search="area.*${ospf.area20}"/>
        <v25 found="yes" search="area-type ${area-type.nssa};"/>
    </testdata>
</data>
